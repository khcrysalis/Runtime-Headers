@class NSFont, NSString, CUIStyleEffectConfiguration, NSArray, CALayer, NSAttributedString, NSColor;

@interface NSTextFieldCell : NSActionCell {
    NSColor *_backgroundColor;
    NSColor *_textColor;
    struct __tfFlags { unsigned char drawsBackground : 1; unsigned char bezelStyle : 3; unsigned char thcSortDirection : 2; unsigned char thcSortPriority : 4; unsigned char mini : 1; unsigned char textColorIgnoresNormalDisableFlag : 1; unsigned char textColorDisableFlag : 1; unsigned char thcForceHighlightForSort : 1; unsigned char invalidTextColor : 1; unsigned char notificationForMarkedText : 1; unsigned char inToolbar : 1; unsigned char hasTextLayer : 1; unsigned char isButtonTitle : 1; unsigned char allowTightening : 1; unsigned char thcHighlighted : 1; unsigned char shouldNotClipToBounds : 1; unsigned char allowsDefaultTightening : 1; unsigned char enableCP : 1; unsigned char automaticCompletionDisabled : 1; unsigned char determiningMenuItemTextColor : 1; unsigned char mouseInside : 1; unsigned char wantsContentAwareTypesettingLanguage : 1; unsigned char buttonTitleCellSupportsWrapping : 1; unsigned char reservedTextFieldCell : 3; } _tfFlags;
    CALayer *_bezelLayer;
    NSFont *_cachedSynthesizedFont;
}

@property (retain) CUIStyleEffectConfiguration *styleEffectConfiguration;
@property (copy) NSColor *backgroundColor;
@property BOOL drawsBackground;
@property (copy) NSColor *textColor;
@property unsigned long long bezelStyle;
@property (copy) NSString *placeholderString;
@property (copy) NSAttributedString *placeholderAttributedString;
@property (copy) NSArray *allowedInputSourceLocales;

+ (void)initialize;

- (void)dealloc;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)init;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)setEnabled:(BOOL)a0;
- (id)accessibilityAttachmentAtIndex:(unsigned long long)a0;
- (void)accessibilitySetFocus:(id)a0 forChild:(id)a1;
- (void)setControlView:(id)a0;
- (long long)_contentBacking;
- (id)_textAttributes;
- (id)accessibilityActionDescription:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })expansionFrameWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_accessibilityBoundsOfChild:(id)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_adjustedFrameUsingSquareBezelHacks:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)_allowsStyledTextForColor:(id)a0;
- (BOOL)_allowsStyledTextForColor:(id)a0 withBackgroundStyle:(long long)a1;
- (BOOL)_allowsTextTighteningInView:(id)a0;
- (double)_bezelCellSizeHeightPadding;
- (id)_bezelLayer;
- (BOOL)_buttonTitleCellSupportsWrapping;
- (id)_cachedLineRef;
- (BOOL)_canCacheAttributedStringValue;
- (double)_coreUIBaselineOffsetFromFrameInRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })_coreUIContentRectInsetsForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (struct __CFDictionary { } *)_coreUIDrawOptionsWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1 includeFocus:(BOOL)a2 maskOnly:(BOOL)a3;
- (struct __CFString { } *)_coreUIEnabledStateKeyValue;
- (struct CGSize { double x0; double x1; })_coreUISize;
- (struct __CFString { } *)_coreUISizeKeyValueForCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct __CFString { } *)_coreUIVariantKeyValue;
- (struct __CFString { } *)_coreUIWidgetName;
- (void)_drawBezeledBackgroundWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1 includeFocus:(BOOL)a2;
- (void)_drawFocusRingWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_drawForegroundOfTextLayer;
- (void)_drawKeyboardFocusRingWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)_drawThemeBezelWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_editingBoundsForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)_effectiveFontDidChangeTo:(id)a0;
- (BOOL)_fillsWithBackgroundColor;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_focusRingFrameForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 cellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1;
- (void)_getTextColor:(id *)a0 backgroundColor:(id *)a1;
- (BOOL)_hasInsetEditingBounds;
- (BOOL)_insideFormContext;
- (long long)_interiorContentStateInView:(id)a0;
- (long long)_interiorContentValueInView:(id)a0;
- (void)_invalidateCachedLineRef;
- (void)_invalidateEffectiveFont;
- (void)_invalidateTextColor;
- (BOOL)_isButtonTitleCell;
- (BOOL)_isEditingInView:(id)a0;
- (BOOL)_isToolbarMode;
- (BOOL)_maybeCheckTitleClippingForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (BOOL)_needRedrawOnWindowChangedKeyState;
- (BOOL)_okayToHitTest;
- (id)_preferredFontForFont:(id)a0;
- (id)_selectOrEdit:(const struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 inView:(id)a1 target:(id)a2 editor:(id)a3 event:(id)a4 start:(long long)a5 end:(long long)a6;
- (void)_setButtonTitleCell:(BOOL)a0;
- (void)_setButtonTitleCellSupportsWrapping:(BOOL)a0;
- (void)_setCachedLineRef:(id)a0;
- (void)_setContents:(id)a0;
- (void)_setShouldNotClipToBounds:(BOOL)a0;
- (void)_setToolbarMode:(BOOL)a0;
- (void)_setWantsContentAwareTypesettingLanguage:(BOOL)a0;
- (BOOL)_shouldAdjustDrawingRectUsingSquareBezelHacks;
- (BOOL)_shouldApplyHistoricToolbarYOriginAdjustment;
- (BOOL)_shouldDrawHighlightRect;
- (BOOL)_shouldStyleUneditableTextInView:(id)a0;
- (BOOL)_shouldUseCoreUIContentInsets;
- (BOOL)_shouldUseStyledTextInView:(id)a0 withBackgroundStyle:(long long)a1;
- (id)_stringDrawingContext;
- (id)_styleEffectContentStyle;
- (id)_textColorForMenuItemView;
- (BOOL)_textDimsWhenDisabled;
- (id)_textFieldContentStyleInView:(id)a0 withBackgroundStyle:(long long)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_textLayerDrawingRectForCellFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (long long)_typesetterBehavior;
- (void)_updateBezelInLayer:(id)a0 withFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 inView:(id)a2;
- (void)_updateMouseInsideState:(BOOL)a0;
- (void)_updateMouseTrackingWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (int)_vibrancyBlendModeForControlView:(id)a0;
- (BOOL)_wantsContentAwareTypesettingLanguage;
- (void)_withTemporarilySuppressedContents:(id /* block */)a0;
- (BOOL)acceptsFirstResponder;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeNames;
- (id)accessibilityAuditContrast;
- (id)accessibilityChildrenAttribute;
- (id)accessibilityChildrenInNavigationOrderAttribute;
- (void)accessibilityDrawFocusRing;
- (id)accessibilityElementForAttachment:(id)a0;
- (id)accessibilityHelpStringForChild:(id)a0;
- (id)accessibilityHitTest:(struct CGPoint { double x0; double x1; })a0;
- (BOOL)accessibilityIsChildFocusable:(id)a0;
- (BOOL)accessibilityIsChildrenAttributeSettable;
- (BOOL)accessibilityIsPlaceholderValueAttributeSettable;
- (id)accessibilityParameterizedAttributeNames;
- (void)accessibilityPerformAction:(id)a0;
- (id)accessibilityPlaceholderValueAttribute;
- (id)accessibilityPositionOfChild:(id)a0;
- (id)accessibilitySizeOfChild:(id)a0;
- (id)accessibilityTextLinkAtIndex:(unsigned long long)a0;
- (id)accessibilityTextLinks;
- (BOOL)allowsCharacterPickerTouchBarItem;
- (BOOL)allowsDefaultTighteningForTruncation;
- (BOOL)cachesLineRef;
- (struct CGSize { double x0; double x1; })cellSizeForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (void)drawFocusRingMaskWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)drawInteriorWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)drawWithExpansionFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)drawWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })drawingRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })focusRingMaskBoundsForFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (unsigned long long)hitTestForEvent:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2;
- (id)initTextCell:(id)a0;
- (long long)interiorBackgroundStyle;
- (BOOL)isAutomaticTextCompletionEnabled;
- (BOOL)isOpaque;
- (unsigned long long)lineBreakStrategy;
- (void)mouseEntered:(id)a0;
- (void)mouseExited:(id)a0;
- (void)setAllowsCharacterPickerTouchBarItem:(BOOL)a0;
- (void)setAllowsDefaultTighteningForTruncation:(BOOL)a0;
- (void)setAutomaticTextCompletionEnabled:(BOOL)a0;
- (void)setBackgroundStyle:(long long)a0;
- (void)setBezeled:(BOOL)a0;
- (id)setUpFieldEditorAttributes:(id)a0;
- (void)setWantsNotificationForMarkedText:(BOOL)a0;
- (unsigned long long)textAlignmentPolicy;
- (id)textEncapsulation;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })titleRectForBounds:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (BOOL)trackMouse:(id)a0 inRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 ofView:(id)a2 untilMouseUp:(BOOL)a3;
- (void)updateLayerWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)updateTrackingAreaWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 inView:(id)a1;
- (void)viewDidEndLiveResize;
- (void)viewWillStartLiveResize;
- (BOOL)wantsNotificationForMarkedText;
- (BOOL)wantsUpdateLayerInView:(id)a0;

@end
