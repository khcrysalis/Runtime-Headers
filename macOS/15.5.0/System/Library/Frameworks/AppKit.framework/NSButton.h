@class NSView, NSString, NSImageSymbolConfiguration, NSAttributedString, NSSound, NSColor, NSUserInterfaceCompressionOptions, NSImage;

@interface NSButton : NSControl <_NSAlertSensitiveView, NSUserInterfaceValidations, NSAccessibilityButton, NSUserInterfaceCompression> {
    NSView *_contentView;
    long long _material;
    unsigned char _observingInTableSelection : 1;
    unsigned char _observingToolbarRolloverState : 1;
    unsigned char _hasExplicitMaterialSet : 1;
}

@property (retain) NSView *contentView;
@property (readonly) BOOL wantsAlertStylePadding;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (copy) NSString *title;
@property (copy) NSAttributedString *attributedTitle;
@property (copy) NSString *alternateTitle;
@property (copy) NSAttributedString *attributedAlternateTitle;
@property BOOL hasDestructiveAction;
@property (retain) NSSound *sound;
@property (getter=isSpringLoaded) BOOL springLoaded;
@property long long maxAcceleratorLevel;
@property unsigned long long bezelStyle;
@property (getter=isBordered) BOOL bordered;
@property (getter=isTransparent) BOOL transparent;
@property BOOL showsBorderOnlyWhileMouseInside;
@property (copy) NSColor *bezelColor;
@property (copy) NSColor *contentTintColor;
@property (retain) NSImage *image;
@property (retain) NSImage *alternateImage;
@property unsigned long long imagePosition;
@property unsigned long long imageScaling;
@property BOOL imageHugsTitle;
@property (copy) NSImageSymbolConfiguration *symbolConfiguration;
@property long long state;
@property BOOL allowsMixedState;
@property (copy) NSString *keyEquivalent;
@property unsigned long long keyEquivalentModifierMask;
@property (readonly, copy) NSUserInterfaceCompressionOptions *activeCompressionOptions;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;
+ (id)_buttonWithTitle:(id)a0 image:(id)a1 target:(id)a2 action:(SEL)a3;
+ (id)buttonWithImage:(id)a0 target:(id)a1 action:(SEL)a2;
+ (id)buttonWithTitle:(id)a0 image:(id)a1 target:(id)a2 action:(SEL)a3;
+ (id)buttonWithTitle:(id)a0 target:(id)a1 action:(SEL)a2;
+ (id)checkboxWithTitle:(id)a0 target:(id)a1 action:(SEL)a2;
+ (id)radioButtonWithTitle:(id)a0 target:(id)a1 action:(SEL)a2;
+ (id)sourceListBadgeWithTitle:(id)a0;

- (void)dealloc;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)setHidden:(BOOL)a0;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (BOOL)_hasExtra10_11BordersInToolbars;
- (unsigned long long)_vibrantBlendingStyleForSubtree;
- (void)setDestructive:(BOOL)a0;
- (id)_recursiveFindDefaultButtonCell;
- (struct CGSize { double x0; double x1; })intrinsicContentSizeWithinSize:(struct CGSize { double x0; double x1; })a0;
- (struct CGSize { double x0; double x1; })_alignmentRectSizeForRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (unsigned long long)_axesForDerivingIntrinsicContentSizeFromLayoutSize;
- (struct { double x0; double x1; })_baselineOffsetsAtSize:(struct CGSize { double x0; double x1; })a0;
- (void)_beginObservingInSelectedTableRowIfNeeded;
- (void)_beginObservingToolbarRolloverStateIfNeeded;
- (void)_buttonStyleChangedFromBadge;
- (void)_buttonStyleChangedFromToolbar;
- (void)_buttonStyleChangedToBadge;
- (void)_buttonStyleChangedToToolbar;
- (BOOL)_canBecomeDefaultButton;
- (BOOL)_contentHuggingDefault_isUsuallyFixedHeight;
- (BOOL)_contentHuggingDefault_isUsuallyFixedWidth;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })_contentViewInsets;
- (void)_endObservingInSelectedTableRowIfNeeded;
- (void)_endObservingToolbarRolloverStateIfNeeded;
- (void)_finishedMakingConnections;
- (BOOL)_getIntrinsicArtworkSize:(struct CGSize { double x0; double x1; } *)a0 alignmentRectInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; } *)a1 idealContentInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; } *)a2 maxContentInsets:(struct NSEdgeInsets { double x0; double x1; double x2; double x3; } *)a3;
- (BOOL)_hasExplicitMaterialSet;
- (id)_insetMitigationTreatment;
- (void)_intrinsicContentSizeInvalidatedForChildView:(id)a0;
- (BOOL)_layoutHeightDependsOnWidth;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })_opaqueRectForWindowMoveWhenInTitlebar;
- (id)_popupToSubstituteInInit;
- (id)_preferredAppearance;
- (void)_setSound:(id)a0;
- (void)_setUsesCautionaryAppearanceWhenActionIsDestructive:(BOOL)a0;
- (void)_setVisualProvider:(id)a0;
- (void)_setWindow:(id)a0;
- (id)_sound;
- (id)_supportedOptionsFromPrioritizedOptions:(id)a0;
- (BOOL)_usesCautionaryAppearanceWhenActionIsDestructive;
- (BOOL)acceptsFirstMouse:(id)a0;
- (id)accessibilityLabel;
- (BOOL)accessibilityPerformPress;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })alignmentRectInsets;
- (void)altModifySelection:(id)a0;
- (BOOL)alwaysEnablesRadioButtonExclusivity;
- (double)baselineOffsetFromBottom;
- (BOOL)becomeFirstResponder;
- (void)compressWithPrioritizedCompressionOptions:(id)a0;
- (int)effectiveVibrancyBlendModeForAppearance:(id)a0;
- (double)firstBaselineOffsetFromTop;
- (void)getPeriodicDelay:(float *)a0 interval:(float *)a1;
- (void)highlight:(BOOL)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (struct CGSize { double x0; double x1; })intrinsicContentSize;
- (BOOL)isDestructive;
- (BOOL)isFlipped;
- (BOOL)isGuarded;
- (long long)material;
- (long long)maximumNumberOfLines;
- (double)minimumPressDuration;
- (struct CGSize { double x0; double x1; })minimumSizeWithPrioritizedCompressionOptions:(id)a0;
- (id)ns_widgetType;
- (BOOL)performKeyEquivalent:(id)a0;
- (BOOL)performMnemonic:(id)a0;
- (double)periodicDelay;
- (double)periodicInterval;
- (void)removeMaterial;
- (BOOL)resignFirstResponder;
- (void)setAlwaysEnablesRadioButtonExclusivity:(BOOL)a0;
- (void)setButtonType:(unsigned long long)a0;
- (void)setCell:(id)a0;
- (void)setGuarded:(BOOL)a0;
- (void)setMaterial:(long long)a0;
- (void)setMaximumNumberOfLines:(long long)a0;
- (void)setMinimumPressDuration:(double)a0;
- (void)setNextState;
- (void)setPeriodicDelay:(double)a0;
- (void)setPeriodicDelay:(float)a0 interval:(float)a1;
- (void)setPeriodicInterval:(double)a0;
- (void)setShowsDisclosureChevron:(BOOL)a0;
- (void)setShowsProgressIndicator:(BOOL)a0;
- (void)setTitleWithMnemonic:(id)a0;
- (void)setToolbarAppearance:(long long)a0;
- (void)shiftModifySelection:(id)a0;
- (BOOL)showsDisclosureChevron;
- (BOOL)showsProgressIndicator;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })a0;
- (void)springLoadingActivated:(BOOL)a0 draggingInfo:(id)a1;
- (unsigned long long)springLoadingEntered:(id)a0;
- (void)springLoadingHighlightChanged:(id)a0;
- (void)startSpeaking:(id)a0;
- (void)stopSpeaking:(id)a0;
- (long long)toolbarAppearance;
- (struct NSEdgeInsets { double x0; double x1; double x2; double x3; })touchBarHitTestInsets;
- (void)updateCell:(id)a0;
- (BOOL)validateUserInterfaceItem:(id)a0;
- (void)viewDidMoveToWindow;

@end
