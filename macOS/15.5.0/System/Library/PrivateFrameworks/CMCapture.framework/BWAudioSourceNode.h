@class NSArray, NSString, NSDictionary, BWNodeOutput, NSObject;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface BWAudioSourceNode : BWSourceNode <BWAudioSourceRecordingReadinessDelegate, BWZoomCompletionDelegate> {
    BWNodeOutput *_outputsByMicSourcePosition[3];
    NSDictionary *_sourceRequirements;
    BOOL _useAUHAL;
    NSString *_HALDeviceUID;
    NSString *_AVAudioSessionMode;
    BOOL _listeningForDefaultInputDeviceChanges;
    BOOL _isConfiguredForContinuityCapture;
    BOOL _didBeginInterruption;
    BOOL _doEndInterruption;
    BOOL _isAppAudioSession;
    BOOL _configuresSession;
    BOOL _mixWithOthersEnabled;
    double _sessionRequiredSampleRate;
    struct { unsigned int val[8]; } _clientAuditToken;
    int _clientPID;
    NSString *_clientAudioClockDeviceUID;
    struct OpaqueCMClock { } *_clock;
    unsigned int _audioDeviceID;
    struct opaqueCMFormatDescription { } *_auOutputFormatDescription;
    unsigned int _pullDuration;
    struct ComponentInstanceRecord { long long x0[1]; } *_audioUnit;
    unsigned int _auSubType;
    struct opaqueCMSimpleQueue { } *_renderProcErrorQueue;
    struct opaqueCMSimpleQueue { } *_inactiveBuffersQueue;
    struct opaqueCMSimpleQueue { } *_activeBuffersQueue;
    unsigned long long _nextExpectedHostTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _nextExpectedSampleTime;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _ioprocTimeStampDeltaLimit;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _prevPTS;
    unsigned int _prevNumFrames;
    NSObject<OS_dispatch_queue> *_generateSamplesDispatchQueue;
    BOOL _streamStarted;
    BOOL _streamInterrupted;
    BOOL _endOfDataMarkerSent;
    BOOL _levelMeteringEnabled;
    int _audioLevelUnits;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _latencyOffset;
    NSObject<OS_dispatch_source> *_silenceTimer;
    long long _auRenderCount;
    long long _silenceFramesGeneratedSinceLastAURenderProc;
    struct TimestampedAudioBufferList { struct __CFAllocator *allocator; long long auRenderCount; unsigned int dataBytesCapacity; unsigned int numFrames; struct { long long value; int timescale; unsigned int flags; long long epoch; } pts; struct AudioBufferList *abl; unsigned int numPrependedSilenceFrames; double sampleTime; } _currentSilenceBuffer;
    NSObject<OS_dispatch_queue> *_preparedToRecordHandlerCallbackQueue;
    BOOL _livePhotoCaptureEnabled;
    int _audioCaptureMode;
    BOOL _windNoiseRemovalEnabled;
    BOOL _cinematicVideoCaptureEnabled;
    BOOL _videoRecordingEnabled;
    BOOL _flipStereoAudioCaptureChannels;
    float _stereoAudioCapturePairedCameraBaseFieldOfView;
    float _stereoAudioCapturePairedCameraZoomFactor;
    NSObject<OS_dispatch_queue> *_zoomHandlerQueue;
    long long _maxZoomFrequencyNanos;
    long long _nextZoomTime;
    NSObject<OS_dispatch_source> *_zoomTimer;
    float _nextZoomFactor;
    struct os_unfair_lock_s { unsigned int _os_unfair_lock_opaque; } _zoomLock;
    BOOL _silenceFramesFillingDisabled;
    BOOL _audioPlayingToBuiltinSpeaker;
    BOOL _stopSourceAsynchronously;
}

@property (readonly, nonatomic) NSArray *audioLevels;
@property (nonatomic) BOOL stopSourceAsynchronously;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (void)initialize;
+ (id)audioSourceNodeWithAttributes:(id)a0 sessionPreset:(id)a1 clock:(struct OpaqueCMClock { } *)a2 doConfigureAudio:(BOOL)a3 doMixWithOthers:(BOOL)a4 clientAuditToken:(struct { unsigned int x0[8]; })a5 clientOSVersionSupportsDecoupledIO:(BOOL)a6 clientAudioClockDeviceUID:(id)a7 audioCaptureConnectionConfigurations:(id)a8 isConfiguredForContinuityCapture:(BOOL)a9;

- (void)dealloc;
- (BOOL)start:(id *)a0;
- (BOOL)stop:(id *)a0;
- (struct OpaqueCMClock { } *)clock;
- (void)setVideoRecordingEnabled:(BOOL)a0;
- (BOOL)videoRecordingEnabled;
- (int)audioCaptureMode;
- (void)setAudioCaptureMode:(int)a0;
- (void)setLivePhotoCaptureEnabled:(BOOL)a0;
- (void)setWindNoiseRemovalEnabled:(BOOL)a0;
- (BOOL)cinematicVideoCaptureEnabled;
- (BOOL)flipStereoAudioCaptureChannels;
- (BOOL)hasNonLiveConfigurationChanges;
- (BOOL)isAudioPlayingToBuiltinSpeaker;
- (BOOL)levelMeteringEnabled;
- (BOOL)livePhotoCaptureEnabled;
- (void)makeCurrentConfigurationLive;
- (void)makeOutputsLiveIfNeeded;
- (BOOL)mixWithOthersActive;
- (BOOL)mixWithOthersEnabled;
- (id)nodeSubType;
- (id)outputForMicSourcePosition:(int)a0;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (void)prepareToStartRecordingWithOrientation:(int)a0 recordingSettingsID:(long long)a1 completionHandler:(id /* block */)a2;
- (void)setCinematicVideoCaptureEnabled:(BOOL)a0;
- (void)setFlipStereoAudioCaptureChannels:(BOOL)a0;
- (void)setLevelMeteringEnabled:(BOOL)a0;
- (void)setMixWithOthersEnabled:(BOOL)a0;
- (void)setStereoAudioCapturePairedCameraBaseFieldOfView:(float)a0;
- (void)setStereoAudioCapturePairedCameraZoomFactor:(float)a0;
- (float)stereoAudioCapturePairedCameraBaseFieldOfView;
- (float)stereoAudioCapturePairedCameraZoomFactor;
- (void)unprepareForRecording;
- (void)updateWithAudioSession:(id)a0 clientAuditToken:(struct { unsigned int x0[8]; })a1;
- (BOOL)windNoiseRemovalEnabled;
- (void)zoomCommandHandler:(id)a0 didApplyZoomFactor:(float)a1 zoomFactorWithoutFudge:(float)a2 targetZoomFactor:(float)a3 rampComplete:(BOOL)a4 rampCommandID:(int)a5;

@end
