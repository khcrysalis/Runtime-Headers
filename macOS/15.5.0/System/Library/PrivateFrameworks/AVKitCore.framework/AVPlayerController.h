@class NSDictionary, AVAsset, AVFragmentedMovieMinder, BSSimpleAssertion, NSString, AVTimecodeController, NSError, AVValueTiming, NSTimer, NSArray, AVPlayerLayer, AVPlayerItemPhotosensitivityMetadataHandler, AVPlayer, NSObject, AVObservationController, AVMediaSelectionOption, AVSampleTable, AVCoordinatedPlaybackSuspension, AVKitIntegratedTimeline, NSDate, AVAssetTrack;
@protocol AVPlayerControllerDelegate, OS_dispatch_queue, OS_dispatch_source;

@interface AVPlayerController : NSObject {
    NSArray *_audioMediaSelectionOptions;
    NSArray *_visualMediaSelectionOptions;
    NSArray *_legibleMediaSelectionOptions;
    AVMediaSelectionOption *_cachedSelectedAudioMediaSelectionOption;
    AVMediaSelectionOption *_cachedSelectedLegibleMediaSelectionOption;
    AVMediaSelectionOption *_cachedSelectedLegibleMediaSelectionOptionAccordingToAVFoundation;
    NSString *_lastKnownPersistedExtendedLanguageTag;
    NSString *_recentLegibleLanguageForLastSort;
    void *_observationInfo;
    BOOL _inspectionSuspended;
    id _updateAtMinMaxTimePeriodicObserverToken;
    id _timecodePeriodicObserverToken;
    id /* block */ _listenerBlock;
    BOOL _pictureInPictureInterrupted;
    BOOL _handlesAudioSessionInterruptions;
    BOOL _isDeallocating;
    BOOL _hasSetUpSeekableLiveStreamState;
    id /* block */ _retryPlayingImmediatelyBlock;
    BOOL _shouldPlayImmediately;
    BOOL _looping;
    long long _actionAtItemEnd;
    long long _playbackSuspensionCount;
    long long _scrubbingCount;
    NSObject<OS_dispatch_queue> *_seekQueue;
    BOOL _pendingSeek;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _toleranceBefore;
    struct { long long value; int timescale; unsigned int flags; long long epoch; } _toleranceAfter;
    BOOL _isScanningForward;
    BOOL _isScanningBackward;
    unsigned long long _scanningCount;
    double _preScanningRate;
    AVValueTiming *_liveStreamMinTiming;
    AVValueTiming *_liveStreamMaxTiming;
    BOOL _liveStreamEventModePossible;
    long long _canUseNetworkResourcesForLiveStreamingWhilePausedCount;
    BOOL _previousValueOfCanUseNetworkResourcesForLiveStreamingWhilePaused;
    AVFragmentedMovieMinder *_fragmentedMovieMinder;
    BOOL _shouldPlayWhenLikelyToKeepUp;
    BOOL _forceScanning;
    double _rateBeforeForceScanning;
    BOOL _playingOnSecondScreen;
    BOOL _didPreventSleepWhenStartingExternalPlayback;
    BSSimpleAssertion *_reduceResourceUsageAssertion;
    double _defaultPlaybackRate;
    BOOL _touchBarRequiresLinearPlayback;
    AVTimecodeController *_timecodeController;
    id<AVPlayerControllerDelegate> _internalDelegate;
    NSObject<OS_dispatch_queue> *_backgroundQueue;
    NSDate *_lastTimePlayingOnMatchPointDeviceWasUpdated;
    NSTimer *_updatePlayingOnMatchPointDeviceThrottleTimer;
    AVPlayerItemPhotosensitivityMetadataHandler *_photosensitivityMetadataHandler;
    BOOL _muted;
    BOOL _avkitSettingMuted;
    BOOL _allowsAudioPlayback;
    BOOL _hasPendingAtLiveEdgeStateUpdate;
    NSTimer *_liveEdgeTimer;
    BOOL _isPlayingHDRContent;
}

@property (getter=isPlayingOnSecondScreen) BOOL playingOnSecondScreen;
@property (readonly) BOOL usesExternalPlaybackWhileExternalScreenIsActive;
@property (readonly) struct CGSize { double x0; double x1; } maximumVideoResolution;
@property BOOL handlesAudioSessionInterruptions;
@property (readonly, getter=isPlayingOnMatchPointDevice) BOOL playingOnMatchPointDevice;
@property (readonly, nonatomic) AVSampleTable *currentSampleTable;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } frameCountingObservationInterval;
@property (readonly, nonatomic) long long lastFrameIndex;
@property (readonly, nonatomic) long long currentFrameIndex;
@property (readonly) BOOL hasReadableTimecodes;
@property (readonly) AVTimecodeController *timecodeController;
@property (weak) id<AVPlayerControllerDelegate> internalDelegate;
@property (getter=isAtMaxTime) BOOL atMaxTime;
@property (getter=isAtMinTime) BOOL atMinTime;
@property (getter=isScrubbing) BOOL scrubbing;
@property (retain) AVPlayer *player;
@property (retain, nonatomic) AVPlayer *activePlayer;
@property (nonatomic) double activeRate;
@property (readonly) AVObservationController *observationController;
@property struct CGSize { double width; double height; } presentationSize;
@property (retain) AVAsset *currentAssetIfReady;
@property (retain) AVAsset *interstitialAssetIfReady;
@property (retain) NSObject<OS_dispatch_queue> *assetInspectionQueue;
@property (retain) AVAsset *assetBeingPrepared;
@property (retain) AVAsset *interstitialAssetBeingPrepared;
@property (getter=isPictureInPictureSupported) BOOL pictureInPictureSupported;
@property (retain) NSString *externalPlaybackAirPlayDeviceLocalizedName;
@property (readonly, getter=isReadyToPlay) BOOL readyToPlay;
@property (retain) AVValueTiming *timing;
@property (retain) AVValueTiming *minTiming;
@property (retain) AVValueTiming *maxTiming;
@property (retain) AVAssetTrack *currentAudioTrack;
@property (retain) AVAssetTrack *currentVideoTrack;
@property (getter=isSeekingInternal) BOOL seekingInternal;
@property (getter=isSeeking) BOOL seeking;
@property struct { long long value; int timescale; unsigned int flags; long long epoch; } seekToTimeInternal;
@property double seekToTime;
@property double initialScrubbingTime;
@property (retain) NSDictionary *metadata;
@property (retain) NSArray *contentChapters;
@property (getter=isComposable) BOOL composable;
@property BOOL hasProtectedContent;
@property (retain) NSArray *availableMetadataFormats;
@property (getter=isCompatibleWithAirPlayVideo) BOOL compatibleWithAirPlayVideo;
@property double rateBeforeScrubBegan;
@property (retain) AVCoordinatedPlaybackSuspension *scrubCoordinatorSuspension;
@property (getter=isPreventingIdleSystemSleep) BOOL preventingIdleSystemSleep;
@property (getter=isPreventingIdleDisplaySleep) BOOL preventingIdleDisplaySleep;
@property (getter=isDisablingAutomaticTermination) BOOL disablingAutomaticTermination;
@property (nonatomic) BOOL allowsPictureInPicturePlayback;
@property (nonatomic, getter=isPictureInPictureActive) BOOL pictureInPictureActive;
@property (nonatomic) BOOL canTogglePictureInPicture;
@property (copy) NSString *pipActivitySessionIdentifier;
@property (nonatomic) BOOL hasBegunInspection;
@property (getter=isPlayingOnMatchPointDevice) BOOL playingOnMatchPointDevice;
@property (retain) BSSimpleAssertion *reduceResourceUsageAssertion;
@property (weak) AVPlayerLayer *playerLayerForReducingResources;
@property (retain) NSArray *photosensitivityRegions;
@property (getter=isAtLiveEdge) BOOL atLiveEdge;
@property (retain) AVKitIntegratedTimeline *timeline;
@property (nonatomic, getter=_isScanningTV) BOOL scanningTV;
@property (readonly) NSObject<OS_dispatch_source> *seekTimer;
@property (readonly) NSDate *currentDate;
@property (readonly) NSDate *currentOrEstimatedDate;
@property (readonly) BOOL isPlayingHDRContent;
@property BOOL touchBarRequiresLinearPlayback;
@property BOOL shouldLoadVisualMediaSelectionOptions;
@property (readonly) NSArray *visualMediaSelectionOptions;
@property long long captionAppearanceDisplayType;
@property (retain) AVMediaSelectionOption *currentVideoMediaSelectionOption;
@property (readonly, nonatomic, getter=isPlaybackSuspended) BOOL playbackSuspended;
@property (readonly, nonatomic) double suspendedRate;
@property (nonatomic) BOOL coordinatedPlaybackActive;
@property (readonly, nonatomic) BOOL hasStereoVideo;
@property (nonatomic) BOOL sideBySidePresentation;
@property (readonly) long long status;
@property (readonly) BOOL isCurrentItemReadyForInspection;
@property (readonly) NSError *error;

+ (void)initialize;
+ (id)canonicalLanguageIdentifierFromString:(id)a0;
+ (id)keyPathsForValuesAffectingError;
+ (id)keyPathsForValuesAffectingStatus;
+ (id)keyPathsForValuesAffectingVolume;
+ (id)keyPathsForValuesAffectingCanScanForward;
+ (id)keyPathsForValuesAffectingCanSeekToBeginning;
+ (id)keyPathsForValuesAffectingCanSeekToEnd;
+ (id)keyPathsForValuesAffectingContentDuration;
+ (id)keyPathsForValuesAffectingCurrentTimeWithinEndTimes;
+ (id)keyPathsForValuesAffectingHasAudioMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingHasLegibleMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingHasLiveStreamingContent;
+ (id)keyPathsForValuesAffectingHasMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingHasSeekableLiveStreamingContent;
+ (id)keyPathsForValuesAffectingMaxTime;
+ (id)keyPathsForValuesAffectingMinTime;
+ (id)keyPathsForValuesAffectingPlaying;
+ (id)keyPathsForValuesAffectingPlayingOnExternalScreen;
+ (id)keyPathsForValuesAffectingHasAudioTouchBarMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingCanSeek;
+ (id)keyPathsForValuesAffectingCanTogglePlayback;
+ (id)keyPathsForValuesAffectingCompletelySeekable;
+ (id)keyPathsForValuesAffectingContentDimensions;
+ (id)keyPathsForValuesAffectingContentDurationWithinEndTimes;
+ (id)keyPathsForValuesAffectingCurrentAudioTouchBarMediaSelectionOption;
+ (id)keyPathsForValuesAffectingCurrentLegibleTouchBarMediaSelectionOption;
+ (id)keyPathsForValuesAffectingHasEnabledAudio;
+ (id)keyPathsForValuesAffectingHasEnabledVideo;
+ (id)keyPathsForValuesAffectingHasLegibleTouchBarMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingHasTouchBarMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingSeekableTimeRanges;
+ (id)keyPathsForValuesAffectingCurrentTime;
+ (id)keyPathsForValuesAffectingPictureInPicturePossible;
+ (id)keyPathsForValuesAffectingRate;
+ (id)keyPathsForValuesAffectingTimeControlStatus;
+ (void)setCachedIsPictureInPictureSupported:(BOOL)a0;
+ (id)keyPathsForValuesAffectingCurrentAssetForAudioAndLegibleOptions;
+ (id)_optionsForGroup:(id)a0 asset:(id)a1;
+ (id)_sortedAudibleOption:(id)a0;
+ (id)assetInspectionKeysForInterstitial;
+ (id)assetInspectionKeysForPrimary;
+ (BOOL)cachedIsPictureInPictureSupported;
+ (id)keyPathsForValuesAffectingActiveRate;
+ (id)keyPathsForValuesAffectingAllowsExternalPlayback;
+ (id)keyPathsForValuesAffectingCanPause;
+ (id)keyPathsForValuesAffectingCanPlay;
+ (id)keyPathsForValuesAffectingCanScanBackward;
+ (id)keyPathsForValuesAffectingCanSeekChapterBackward;
+ (id)keyPathsForValuesAffectingCanSeekChapterForward;
+ (id)keyPathsForValuesAffectingCanSeekFrameBackward;
+ (id)keyPathsForValuesAffectingCanSeekFrameForward;
+ (id)keyPathsForValuesAffectingCurrentAudioMediaSelectionOption;
+ (id)keyPathsForValuesAffectingCurrentLegibleMediaSelectionOption;
+ (id)keyPathsForValuesAffectingCurrentSampleTable;
+ (id)keyPathsForValuesAffectingCurrentVideoMediaSelectionOption;
+ (id)keyPathsForValuesAffectingDefaultPlaybackRate;
+ (id)keyPathsForValuesAffectingExternalPlaybackActive;
+ (id)keyPathsForValuesAffectingExternalPlaybackType;
+ (id)keyPathsForValuesAffectingForwardPlaybackEndTime;
+ (id)keyPathsForValuesAffectingHasContent;
+ (id)keyPathsForValuesAffectingHasContentChapters;
+ (id)keyPathsForValuesAffectingHasReadableTimecodes;
+ (id)keyPathsForValuesAffectingHasShareableContent;
+ (id)keyPathsForValuesAffectingHasTrimmableContent;
+ (id)keyPathsForValuesAffectingHasVideo;
+ (id)keyPathsForValuesAffectingIsCurrentItemReadyForInspection;
+ (id)keyPathsForValuesAffectingLoadedTimeRanges;
+ (id)keyPathsForValuesAffectingMaximumVideoResolution;
+ (id)keyPathsForValuesAffectingPlayableOffline;
+ (id)keyPathsForValuesAffectingReadyToPlay;
+ (id)keyPathsForValuesAffectingReversePlaybackEndTime;
+ (id)keyPathsForValuesAffectingStreaming;
+ (id)keyPathsForValuesAffectingUsesExternalPlaybackWhileExternalScreenIsActive;
+ (id)keyPathsForValuesAffectingpreferredTransform;
+ (id)videoTrackInspectionKeysForPrimary;

- (void)dealloc;
- (id)init;
- (void).cxx_destruct;
- (void)setObservationInfo:(void *)a0;
- (void *)observationInfo;
- (BOOL)isMuted;
- (void)_commonInit;
- (double)currentTime;
- (BOOL)hasContent;
- (BOOL)isPlaying;
- (double)rate;
- (void)setRate:(double)a0;
- (void)setVolume:(double)a0;
- (double)volume;
- (id)loadedTimeRanges;
- (float)nominalFrameRate;
- (void)setMuted:(BOOL)a0;
- (BOOL)hasVideo;
- (void)pause:(id)a0;
- (BOOL)isStreaming;
- (void)seekToTime:(double)a0 toleranceBefore:(double)a1 toleranceAfter:(double)a2;
- (double)minTime;
- (double)maxTime;
- (void)setMaxTime:(double)a0;
- (void)setMinTime:(double)a0;
- (BOOL)hasEnabledAudio;
- (id)initWithPlayer:(id)a0;
- (BOOL)hasEnabledVideo;
- (BOOL)allowsExternalPlayback;
- (id)audioOptions;
- (BOOL)canUseNetworkResourcesForLiveStreamingWhilePaused;
- (long long)externalPlaybackType;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })forwardPlaybackEndTime;
- (BOOL)isExternalPlaybackActive;
- (BOOL)isPlayableOffline;
- (id)mediaSelectionGroupForMediaCharacteristic:(id)a0;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })preferredTransform;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })reversePlaybackEndTime;
- (void)seekToTime:(double)a0;
- (id)seekableTimeRanges;
- (void)setAllowsExternalPlayback:(BOOL)a0;
- (void)setCanUseNetworkResourcesForLiveStreamingWhilePaused:(BOOL)a0;
- (void)setForwardPlaybackEndTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (void)setReversePlaybackEndTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (long long)timeControlStatus;
- (double)defaultPlaybackRate;
- (void)setDefaultPlaybackRate:(double)a0;
- (BOOL)canSeek;
- (BOOL)isLooping;
- (void)play:(id)a0;
- (BOOL)canPlay;
- (double)contentDuration;
- (BOOL)hasLegibleMediaSelectionOptions;
- (void)setPictureInPictureInterrupted:(BOOL)a0;
- (void)togglePlayback:(id)a0;
- (void)beginScrubbing:(id)a0;
- (BOOL)canScanBackward;
- (BOOL)hasSeekableLiveStreamingContent;
- (id)audioMediaSelectionOptions;
- (id)audioTouchBarMediaSelectionOptions;
- (void)beginScanningBackward:(id)a0;
- (void)beginScanningForward:(id)a0;
- (void)beginTouchBarScrubbing;
- (BOOL)canBeginTouchBarScrubbing;
- (BOOL)canPause;
- (BOOL)canScanForward;
- (BOOL)canSeekFrameBackward;
- (BOOL)canSeekFrameForward;
- (BOOL)canSeekToBeginning;
- (BOOL)canSeekToEnd;
- (BOOL)canTogglePlayback;
- (struct CGSize { double x0; double x1; })contentDimensions;
- (double)contentDurationWithinEndTimes;
- (void)controlsViewDidDisappear;
- (void)controlsViewWillAppear;
- (id)currentAudioMediaSelectionOption;
- (id)currentAudioTouchBarMediaSelectionOption;
- (id)currentLegibleMediaSelectionOption;
- (id)currentLegibleTouchBarMediaSelectionOption;
- (double)currentTimeWithinEndTimes;
- (void)endScanningBackward:(id)a0;
- (void)endScanningForward:(id)a0;
- (void)endScrubbing:(id)a0;
- (void)endTouchBarScrubbing;
- (void)gotoEndOfSeekableRanges:(id)a0;
- (BOOL)hasAudioMediaSelectionOptions;
- (BOOL)hasContentChapters;
- (BOOL)hasLiveStreamingContent;
- (BOOL)hasMediaSelectionOptions;
- (BOOL)isPictureInPictureInterrupted;
- (BOOL)isPictureInPicturePossible;
- (BOOL)isPlayingOnExternalScreen;
- (id)legibleMediaSelectionOptions;
- (id)legibleTouchBarMediaSelectionOptions;
- (void)seekByTimeInterval:(double)a0;
- (void)seekByTimeInterval:(double)a0 toleranceBefore:(double)a1 toleranceAfter:(double)a2;
- (void)seekChapterBackward:(id)a0;
- (void)seekChapterForward:(id)a0;
- (void)seekToBeginning:(id)a0;
- (void)seekToEnd:(id)a0;
- (void)setAudioMediaSelectionOptions:(id)a0;
- (void)setCurrentAudioMediaSelectionOption:(id)a0;
- (void)setCurrentAudioTouchBarMediaSelectionOption:(id)a0;
- (void)setCurrentLegibleMediaSelectionOption:(id)a0;
- (void)setCurrentLegibleTouchBarMediaSelectionOption:(id)a0;
- (void)setLegibleMediaSelectionOptions:(id)a0;
- (void)setPlaying:(BOOL)a0;
- (void)skipBackwardThirtySeconds:(id)a0;
- (void)toggleMuted:(id)a0;
- (void)togglePlaybackEvenWhenInBackground:(id)a0;
- (void)updateMinMaxTiming;
- (void)increaseVolume:(id)a0;
- (void)seekToTimecode:(id)a0;
- (void)decreaseVolume:(id)a0;
- (id)audioWaveform;
- (void)autoplay:(id)a0;
- (void)beginPlaybackSuspension;
- (BOOL)canSeekChapterBackward;
- (BOOL)canSeekChapterForward;
- (void)cancelThumbnailGenerationForRequestType:(long long)a0;
- (void)changeVolumeToMaximum:(id)a0;
- (void)changeVolumeToMinimum:(id)a0;
- (void)endPlaybackSuspension;
- (void)endReducingResourcesForPictureInPicturePlayerLayer:(id)a0;
- (long long)frameNumberForCurrentTime;
- (void)generateTouchBarThumbnailsForTimes:(id)a0 tolerance:(double)a1 size:(struct CGSize { double x0; double x1; })a2 requestType:(long long)a3 thumbnailHandler:(id /* block */)a4;
- (BOOL)hasAudioTouchBarMediaSelectionOptions;
- (BOOL)hasLegibleTouchBarMediaSelectionOptions;
- (BOOL)hasShareableContent;
- (BOOL)hasTouchBarMediaSelectionOptions;
- (BOOL)hasTrimmableContent;
- (BOOL)isCompletelySeekable;
- (id)maxTimecode;
- (void)pauseForAllCoordinatedPlaybackParticipants:(BOOL)a0;
- (void)scanBackward:(id)a0;
- (void)scanForward:(id)a0;
- (void)seekFrameBackward:(id)a0;
- (void)seekFrameForward:(id)a0;
- (void)seekToChapter:(id)a0;
- (void)seekToFrame:(long long)a0;
- (void)setInspectionSuspended:(BOOL)a0;
- (BOOL)startGeneratingTimecodesUsingBlock:(id /* block */)a0;
- (void)stopGeneratingTimecodes;
- (void)togglePictureInPicture:(id)a0;
- (void)setLooping:(BOOL)a0;
- (void)_updatePhotosensitivityRegions;
- (BOOL)avkit_isAVPlayerControllerOrSubclass;
- (void)beginReducingResourcesForPictureInPicturePlayerLayer:(id)a0;
- (void)beginScrubbing;
- (BOOL)closedCaptionsEnabled;
- (void)endScrubbing;
- (BOOL)isInspectionSuspended;
- (BOOL)isReducingResourcesForPictureInPicture;
- (id)legibleOptions;
- (void)setRateWithForce:(double)a0;
- (void)startUsingNetworkResourcesForLiveStreamingWhilePaused;
- (void)stopUsingNetworkResourcesForLiveStreamingWhilePaused;
- (id)timecodeForCurrentTime;
- (double)timecodeObservationInterval;
- (void)updateTiming;
- (void)setAllowsAudioPlayback:(BOOL)a0;
- (void)_updateMetadata;
- (void)setVisualMediaSelectionOptions:(id)a0;
- (BOOL)subtitlesActive;
- (void)_prepareAssetForInspection:(id)a0 assetKeys:(id)a1 videoTrackKeys:(id)a2 completion:(id /* block */)a3;
- (void)setMediaOptionCriteriaAlwaysOn:(BOOL)a0;
- (struct OpaqueCMTimebase { } *)_activeTimebaseForUI;
- (double)_adjustedSeekTimeFromTime:(double)a0 toTime:(double)a1;
- (double)_anchorTimeWithTime:(double)a0;
- (BOOL)_assetContainsProResRaw:(id)a0;
- (BOOL)_assetIsMarkedNotSerializable:(id)a0;
- (BOOL)_assetIsRestrictedFromSaving:(id)a0;
- (void)_beginPlaybackSuspension_AVFoundationStrategy;
- (void)_cancelOutstandingAtLiveEdgeStateUpdates;
- (void)_cancelPendingSeeksIfNeeded;
- (id)_createMetadataDictionaryForCurrentAsset;
- (void)_disableLegibleMediaSelectionOptions:(id)a0;
- (void)_enableAutoMediaSelection:(id)a0;
- (void)_endPlaybackSuspension_AVFoundationStrategy;
- (void)_ensureUserCaptionDisplayType:(long long)a0;
- (id)_languageCodesFromLanguageIdentifiers:(id)a0;
- (id)_legibleOptionsForPlayerItem:(id)a0 asset:(id)a1;
- (BOOL)_mediaSelectionCriteriaCanBeAppliedAutomaticallyToLegibleMediaSelectionGroup;
- (BOOL)_mediaSelectionCriteriaCanBeAppliedAutomaticallyToLegibleMediaSelectionGroupForPlayerItem:(id)a0 asset:(id)a1;
- (void)_observeValueForKeyPath:(id)a0 oldValue:(id)a1 newValue:(id)a2;
- (id)_optionsForGroup:(id)a0;
- (id)_outputContext;
- (void)_performAutomaticMediaSelectionForUserCaptionDisplayType:(long long)a0;
- (id)_photosensitiveDisplayTimes;
- (void)_playAtRate:(double)a0;
- (id)_playableLegibleMediaSelectionOptions;
- (id)_playableLegibleMediaSelectionOptionsForAsset:(id)a0;
- (id)_preferredLanguageCodes;
- (id)_preferredLanguageCodesForPlayer:(id)a0;
- (void)_prepareAssetForInspectionIfNeeded;
- (id)_queuePlayer;
- (void)_retryPlayImmediatelyIfNeeded;
- (void)_scheduleAtLiveEdgeStateUpdateIfNeeded;
- (void)_scheduleAtLiveEdgeStateUpdateWithTimeInterval:(double)a0;
- (id)_selectedMediaOptionWithMediaCharacteristic:(id)a0;
- (id)_selectedMediaOptionWithMediaCharacteristic:(id)a0 playerItem:(id)a1 asset:(id)a2;
- (void)_setMediaOption:(id)a0 mediaCharacteristic:(id)a1;
- (void)_setMinTiming:(id)a0 maxTiming:(id)a1;
- (void)_setMostRecentChosenOption:(id)a0;
- (void)_setNeedsAtLiveEdgeStateUpdate;
- (void)_setPlaybackSuspended:(BOOL)a0;
- (void)_setRate_AVFoundationStrategy:(double)a0;
- (void)_setSuspendedRate:(double)a0;
- (void)_setupInterstitialController;
- (void)_startSuspendingPlayback;
- (void)_stopSuspendingPlayback;
- (void)_throttledUpdatePlayingOnMatchPointDeviceIfNeededWithContext:(id)a0;
- (id)_timecodeTrack;
- (long long)_typeForMediaSelectionOption:(id)a0;
- (void)_updateActivePlayer;
- (void)_updateAtLiveEdgeStateAndScheduleTimerIfNeeded;
- (void)_updateAtLiveEdgeStateIfNeeded;
- (void)_updateCoordinatedPlaybackActive;
- (void)_updateCurrentAudioTrackIfNeeded;
- (void)_updateCurrentVideoTrackIfNeeded;
- (void)_updateExternalPlaybackAirPlayDeviceLocalizedNameIfNeeded;
- (void)_updateMinMaxTimingIfNeeded;
- (void)_updatePlayerMutedState;
- (void)_updatePlayingOnMatchPointDeviceIfNeeded;
- (void)_updateRateForScrubbingAndSeeking;
- (void)_updateScanningBackwardRate;
- (void)_updateScanningForwardRate;
- (BOOL)_willAutomaticallySelectLegibleFallbackForLanguageMismatch;
- (void)acquireResourceReductionAssertion;
- (void)actuallySeekToTime;
- (BOOL)allowsAudioPlayback;
- (id)audioOptionsForAsset:(id)a0;
- (BOOL)canPlayImmediately;
- (id)currentAssetForAudioAndLegibleOptions;
- (id)currentAudioMediaSelectionOptionForPlayerItem:(id)a0 asset:(id)a1;
- (void)currentEnabledAssetTrackForMediaType:(id)a0 completionHandler:(id /* block */)a1;
- (id)currentVideoMediaSelectionOption;
- (long long)getFrameIndexForTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0;
- (struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; })getTimeRangeForFrameIndex:(long long)a0;
- (BOOL)hasTimecodes;
- (BOOL)isDisplayingNonForcedOnlyLegibleOption;
- (BOOL)isTouchBarThumbnailGeneratorLoaded;
- (id)loadTimecodeControllerIfNeeded;
- (id)maxFrameCountString;
- (id)playerItemForAudioAndLegibleOptions;
- (void)reloadAudioOptions;
- (void)reloadLegibleOptions;
- (void)reloadOptions;
- (void)reloadOptionsAndCurrentSelections;
- (void)reloadOptionsAssumingMediaOptionsMayHaveChanged:(BOOL)a0;
- (void)reloadVisualOptions;
- (void)resumePlaybackCoordinatorIfSuspended;
- (id)scanningDelays;
- (void)seekOrStepByFrameCount:(long long)a0;
- (void)seekToCMTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 toleranceBefore:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 toleranceAfter:(struct { long long x0; int x1; unsigned int x2; long long x3; })a2;
- (void)selectedMediaOptionMayHaveChanged;
- (void)selectedMediaOptionMayHaveChanged:(BOOL)a0;
- (void)setCurrentAssetMediaOption:(id)a0;
- (BOOL)setLegibleMediaOptionVisibility:(BOOL)a0 prefersLastKnownCaptionType:(BOOL)a1 prefersSystemLanguage:(BOOL)a2;
- (void)setLegibleMediaSelectionOptions:(id)a0 audioMediaSelectionOptions:(id)a1 assumeMediaOptionMayHaveChanged:(BOOL)a2;
- (void)startInspectionIfNeeded;
- (void)startKVO;
- (void)suspendPlaybackCoordinatorWhileActivelySeekingIfNecessary;
- (void)throttledSeekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })a0 toleranceBefore:(struct { long long x0; int x1; unsigned int x2; long long x3; })a1 toleranceAfter:(struct { long long x0; int x1; unsigned int x2; long long x3; })a2;
- (id)touchBarThumbnailGenerator;
- (void)updateAtMinMaxTime;
- (id)visualMediaSelectionOptions;
- (id)visualOptions;

@end
