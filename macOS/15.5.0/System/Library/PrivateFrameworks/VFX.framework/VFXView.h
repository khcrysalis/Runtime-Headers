@class AVAudioEngine, MTLRenderPassDescriptor, VFXNode, VFXCameraController, VFXDisplayLink, VFXRenderGraph, AVAudioEnvironmentNode, VFXJitterer, VFXWorld, NSString, CAMetalLayer, VFXRenderer, VFXRecursiveLock, _TtC3VFX13VFXViewLegacy, NSColor;
@protocol MTLRenderCommandEncoder, MTLDevice, VFXEventHandler, VFXCameraControlConfiguration, VFXWorldRendererDelegate, MTLCommandQueue;

@interface VFXView : NSView <VFXWorldRenderer> {
    double _currentSystemTime;
    double _lastUpdate;
    unsigned char _isOpaque : 1;
    unsigned char _rendersContinuously : 1;
    unsigned char _wantsHDR : 1;
    unsigned char _firstDrawDone : 1;
    unsigned char _drawOnMainThreadPending : 1;
    unsigned char _viewIsOffscreen : 1;
    unsigned char _inRenderQueueForLayerBackedGLRendering : 1;
    unsigned char _isInLiveResize : 1;
    unsigned char _usesCustomScaleFactor : 1;
    unsigned char _usesCustomPixelFormat : 1;
    unsigned char _usesCustomColorSpace : 1;
    BOOL _isHidden;
    BOOL _lowLatency;
    BOOL _didTriggerRedrawWhileRendering;
    id _delegate;
    VFXRenderer *_renderer;
    VFXWorld *_world;
    BOOL _displayLinkCreationRequested;
    BOOL _skipFramesIfNoDrawableAvailable;
    VFXDisplayLink *_displayLink;
    long long _preferredFramePerSeconds;
    CAMetalLayer *_backingLayer;
    id _otherMouseEventMonitor;
    BOOL _shouldHandleOtherMouseButtonDrag;
    VFXJitterer *_jitterer;
    VFXRecursiveLock *_lock;
    NSColor *_backgroundColor;
    struct CGSize { double width; double height; } _boundsSize;
    char *_snapshotImageData;
    unsigned long long _snapshotImageDataLength;
    id<VFXEventHandler> _navigationCameraController;
    BOOL _imguiHandleMouseDown;
    id<MTLDevice> _device;
    _TtC3VFX13VFXViewLegacy *_legacyView;
}

@property (retain, nonatomic) VFXWorld *world;
@property (nonatomic) BOOL rendersContinuously;
@property (copy, nonatomic) NSColor *backgroundColor;
@property (nonatomic) BOOL allowsCameraControl;
@property (readonly, nonatomic) id<VFXCameraControlConfiguration> cameraControlConfiguration;
@property (readonly, nonatomic) VFXCameraController *defaultCameraController;
@property (nonatomic) long long preferredFramesPerSecond;
@property BOOL drawableResizesAsynchronously;
@property (nonatomic) BOOL wantsExtendedDynamicRange;
@property (weak, nonatomic) id<VFXWorldRendererDelegate> delegate;
@property (retain, nonatomic) VFXNode *pointOfView;
@property (nonatomic) BOOL autoenablesDefaultLighting;
@property (nonatomic) unsigned long long antialiasingMode;
@property (nonatomic, getter=isJitteringEnabled) BOOL jitteringEnabled;
@property (nonatomic, getter=isTemporalAntialiasingEnabled) BOOL temporalAntialiasingEnabled;
@property (nonatomic) BOOL additiveWritesToAlpha;
@property (nonatomic) BOOL showsStatistics;
@property (nonatomic) unsigned long long debugOptions;
@property (readonly, nonatomic) id<MTLRenderCommandEncoder> currentRenderCommandEncoder;
@property (readonly, nonatomic) MTLRenderPassDescriptor *currentRenderPassDescriptor;
@property (readonly, nonatomic) id<MTLDevice> device;
@property (readonly, nonatomic) unsigned long long colorPixelFormat;
@property (readonly, nonatomic) unsigned long long depthPixelFormat;
@property (readonly, nonatomic) unsigned long long stencilPixelFormat;
@property (readonly, nonatomic) id<MTLCommandQueue> commandQueue;
@property (readonly, nonatomic) AVAudioEngine *audioEngine;
@property (readonly, nonatomic) AVAudioEnvironmentNode *audioEnvironmentNode;
@property (retain, nonatomic) VFXNode *audioListener;
@property (readonly, nonatomic) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } currentViewport;
@property (readonly, nonatomic) struct CGColorSpace { } *workingColorSpace;
@property (retain, nonatomic) VFXRenderGraph *renderGraph;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;

+ (BOOL)automaticallyNotifiesObserversForKey:(id)a0;
+ (id)keyPathsForValuesAffectingValueForKey:(id)a0;
+ (BOOL)displayLinkCallbackShouldReturnImmediately;
+ (BOOL)_isMetalSupported;
+ (id)_kvoKeysForwardedToRenderer;
+ (id)deviceForOptions:(id)a0;
+ (BOOL)displayLinkPolicy;
+ (BOOL)shouldObserveApplicationStateToPreventBackgroundGPUAccess;
+ (BOOL)usesSeparateWorkGroup;

- (void)_vfx_setColorSpace:(struct CGColorSpace { } *)a0;
- (void)vfx_resetColorSpace;
- (void)vfx_setClearBackground;
- (void)vfx_setExtendedLinearSRGBColorSpace;
- (void)vfx_setLinearSRGBColorSpace;
- (void)dealloc;
- (id)init;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (void)lock;
- (void)setHidden:(BOOL)a0;
- (void)unlock;
- (void)setPixelFormat:(unsigned long long)a0;
- (id)commandQueue;
- (void)layout;
- (unsigned long long)pixelFormat;
- (void)observeValueForKeyPath:(id)a0 ofObject:(id)a1 change:(id)a2 context:(void *)a3;
- (id)snapshot;
- (void)reshape;
- (void)setScaleFactor:(double)a0;
- (void)_setNeedsDisplay;
- (void)_windowBackingDidChange:(id)a0;
- (BOOL)acceptsFirstMouse:(id)a0;
- (BOOL)acceptsFirstResponder;
- (BOOL)becomeFirstResponder;
- (struct CGColorSpace { } *)colorSpace;
- (id)contentLayer;
- (void)flagsChanged:(id)a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a0 options:(id)a1;
- (BOOL)isOpaque;
- (void)keyDown:(id)a0;
- (void)keyUp:(id)a0;
- (void)magnifyWithEvent:(id)a0;
- (id)makeBackingLayer;
- (void)mouseDown:(id)a0;
- (void)mouseDragged:(id)a0;
- (void)mouseMoved:(id)a0;
- (void)mouseUp:(id)a0;
- (id)renderer;
- (BOOL)resignFirstResponder;
- (unsigned char)resizingMode;
- (void)rotateWithEvent:(id)a0;
- (double)scaleFactor;
- (void)scrollWheel:(id)a0;
- (void)setColorSpace:(struct CGColorSpace { } *)a0;
- (void)setFrameSize:(struct CGSize { double x0; double x1; })a0;
- (void)setNeedsDisplay:(BOOL)a0;
- (void)setResizingMode:(unsigned char)a0;
- (void)setWantsLayer:(BOOL)a0;
- (void)update;
- (void)viewDidEndLiveResize;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToWindow:(id)a0;
- (void)viewWillStartLiveResize;
- (void)windowWillClose:(id)a0;
- (double)contentScaleFactor;
- (BOOL)framebufferOnly;
- (BOOL)lowLatency;
- (unsigned long long)renderMode;
- (void)setFramebufferOnly:(BOOL)a0;
- (void)setLowLatency:(BOOL)a0;
- (void)setRenderMode:(unsigned long long)a0;
- (void)setEventHandler:(id)a0;
- (id)eventHandler;
- (id)effect;
- (void)setEffect:(id)a0;
- (id)scene;
- (void)setContentScaleFactor:(double)a0;
- (void)setScene:(id)a0;
- (void)setDisplayLink:(id)a0;
- (id)displayLink;
- (void)_windowOcclusionStateDidChange:(id)a0;
- (BOOL)handleKeyDown:(id)a0;
- (float)zoomFactor;
- (void)setZoomFactor:(float)a0;
- (id)hitTest:(struct CGPoint { double x0; double x1; })a0 options:(id)a1;
- (void)_commonInit:(id)a0;
- (void *)__CFObject;
- (BOOL)_canJitter;
- (void)_systemTimeAnimationStarted:(id)a0;
- (BOOL)autoAdjustCamera;
- (void)rotateOf:(float)a0;
- (void)setAllowsBrowsing:(BOOL)a0;
- (void)setAsynchronousLoading:(BOOL)a0;
- (void)setAutoAdjustCamera:(BOOL)a0;
- (void)setPointOfView:(id)a0 animate:(BOOL)a1;
- (void)switchToCameraNamed:(id)a0;
- (void)switchToNextCamera;
- (void)windowChangedScreen:(id)a0;
- (id)_renderingQueue;
- (void)_addGPUFramePresentedHandler:(id /* block */)a0;
- (void)_allowGPUBackgroundExecution;
- (void /* unknown type, empty encoding */)unprojectPoint:(SEL)a0;
- (void)_beginMouseMovedTracking;
- (BOOL)prepareObject:(id)a0 shouldAbortBlock:(id /* block */)a1;
- (void)_addGPUFrameCompletedHandler:(id /* block */)a0;
- (void)_addGPUFrameScheduledHandler:(id /* block */)a0;
- (void)_adjustBackingLayerPixelFormat;
- (id)_authoringEnvironment;
- (void)set_commandBufferStatusMonitor:(id)a0;
- (BOOL)skipFramesIfNoDrawableAvailable;
- (void)_backgroundDidChange;
- (void)_cancelMouseMovedTracking;
- (BOOL)_checkAndUpdateDisplayLinkStateIfNeeded;
- (id)_commandBufferStatusMonitor;
- (void)_createDisplayLinkIfNeeded;
- (id)_defaultBackgroundColor;
- (void)_drawAtTime:(double)a0;
- (BOOL)_isEditor;
- (double)_renderThreadPriority;
- (void)_resetContentsScaleFactor;
- (void)_reshape;
- (id)_resourceManagerMonitor;
- (float)_runFPSTestWithDuration:(double)a0;
- (struct { void /* unknown type, empty encoding */ x0[4]; })_screenTransform;
- (BOOL)_shouldInheritContentsScale:(float)a0;
- (BOOL)_showsAuthoringEnvironment;
- (float)_superSamplingFactor;
- (struct CGSize { double x0; double x1; })_updateBackingSize;
- (void)_updateContentsScaleFactor;
- (void)_updateOpacity;
- (void /* unknown type, empty encoding */)_viewport;
- (struct CGSize { double x0; double x1; })backingSizeForBoundSize:(struct CGSize { double x0; double x1; })a0;
- (void)eventHandlerWantsRedraw;
- (id)hitTestWithSegmentFromPoint:(id)a0 toPoint:(SEL)a1 options:(id)a2;
- (BOOL)isNodeInsideFrustum:(id)a0 withPointOfView:(id)a1;
- (id)navigationCameraController;
- (id)nodesInsideFrustumWithPointOfView:(id)a0;
- (id)pointOfCulling;
- (void)prepareObjects:(id)a0 withCompletionHandler:(id /* block */)a1;
- (void /* unknown type, empty encoding */)projectPoint:(SEL)a0;
- (void)setNavigationCameraController:(id)a0;
- (void)setPointOfCulling:(id)a0;
- (void)setSkipFramesIfNoDrawableAvailable:(BOOL)a0;
- (void)setWantsHDR:(BOOL)a0;
- (void)set_resourceManagerMonitor:(id)a0;
- (void)set_screenTransform:(struct { void /* unknown type, empty encoding */ x0[4]; })a0;
- (void)set_superSamplingFactor:(float)a0;
- (void)updateAtTime:(double)a0;
- (BOOL)wantsHDR;
- (void)invalidateDisplayLink;
- (void)_jitterRedisplay;
- (void)_endListeningToOtherMouseEvents;
- (void)VFX_displayLinkCallback:(double)a0;
- (void)set_legacyView:(id)a0;
- (id)setupLegacyView;
- (BOOL)triggersEnabled;
- (void)_resizeIfNeeded;
- (BOOL)isEventInImGUI:(id)a0;
- (BOOL)performMouseUp:(id)a0;
- (void)_beginListeningToOtherMouseEvents;
- (id)_legacyView;
- (void)_updateProbes:(id)a0 progress:(id)a1;
- (BOOL)_wantsWorldRendererDelegationMessages;
- (void)_worldDidUpdate:(id)a0;
- (unsigned long long)debugUIOptions;
- (BOOL)dispatchEventToVFXCore:(id)a0;
- (BOOL)isEmulatingStereo;
- (id)legacyView;
- (BOOL)performMouseDown:(id)a0;
- (id /* block */)postRenderCallback;
- (void)renderWithCompletion:(id /* block */)a0;
- (void)renderWithPresentWithTransaction:(BOOL)a0 completion:(id /* block */)a1;
- (unsigned long long)rendererKind;
- (void)setDebugUIOptions:(unsigned long long)a0;
- (void)setEmulateStereo:(BOOL)a0;
- (void)setPostRenderCallback:(id /* block */)a0;
- (void)setRendererKind:(unsigned long long)a0;
- (void)setTriggersEnabled:(BOOL)a0;
- (void)set_wantsWorldRendererDelegationMessages:(BOOL)a0;
- (BOOL)showsDebugUI;
- (id)translatedEvent:(id)a0;
- (void)updateLayerLatency;
- (id)vfx_backingLayer;
- (BOOL)vfx_inLiveResize;
- (void)vfx_setBackingLayer:(id)a0;

@end
