@class NSAffineTransform, NSString, NSCharacterSet, NSNumber, NSFontDescriptor;

@interface NSFont : NSObject <NSCopying, NSSecureCoding>

@property (class, readonly) double systemFontSize;
@property (class, readonly) double smallSystemFontSize;
@property (class, readonly) double labelFontSize;
@property (class, readonly) BOOL supportsSecureCoding;

@property (copy, setter=_setCachedVariantWeight:) NSNumber *_cachedVariantWeight;
@property (readonly) double _spaceGlyphAdvance;
@property (readonly, copy) NSString *fontName;
@property (readonly) double pointSize;
@property (readonly) const double *matrix;
@property (readonly, copy) NSString *familyName;
@property (readonly, copy) NSString *displayName;
@property (readonly) NSFontDescriptor *fontDescriptor;
@property (readonly, copy) NSAffineTransform *textTransform;
@property (readonly) unsigned long long numberOfGlyphs;
@property (readonly) unsigned long long mostCompatibleStringEncoding;
@property (readonly) NSCharacterSet *coveredCharacterSet;
@property (readonly) struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } boundingRectForFont;
@property (readonly) struct CGSize { double x0; double x1; } maximumAdvancement;
@property (readonly) double ascender;
@property (readonly) double descender;
@property (readonly) double leading;
@property (readonly) double underlinePosition;
@property (readonly) double underlineThickness;
@property (readonly) double italicAngle;
@property (readonly) double capHeight;
@property (readonly) double xHeight;
@property (readonly, getter=isFixedPitch) BOOL fixedPitch;
@property (readonly, copy) NSFont *verticalFont;
@property (readonly, getter=isVertical) BOOL vertical;

+ (id)_menuItemSectionHeaderFontEmphasized:(BOOL)a0;
+ (id)_preferredFontForControlSize:(unsigned long long)a0 weight:(double)a1;
+ (id)_preferredFontForTextSubheadlineEmphasized;
+ (id)_windowSubtitleFont;
+ (id)_windowTitleFontWithSubtitle:(BOOL)a0;
+ (id)_windowTitleFontWithSubtitle:(BOOL)a0 toolbarStyle:(long long)a1;
+ (id)preferredFontForTextStyle:(id)a0 addingSymbolicTraits:(unsigned int)a1;
+ (id)preferredFontForTextStyle:(id)a0 options:(id)a1;
+ (void)initialize;
+ (id)userFontOfSize:(double)a0;
+ (void)_registerForFontSetNotification;
+ (id)menuFontOfSize:(double)a0;
+ (BOOL)_allowsDefaultFontSubstitution;
+ (BOOL)_allowsDefaultFontSubstitutionFor1XOnly;
+ (id)availableFontFamilies;
+ (id)availableFonts;
+ (id)availableMembersOfFontFamily:(id)a0;
+ (id)boldSystemFontOfSize:(double)a0;
+ (id)controlContentFontOfSize:(double)a0;
+ (id)fontWithDescriptor:(id)a0 size:(double)a1;
+ (id)fontWithName:(id)a0 size:(double)a1;
+ (id)menuBarFontOfSize:(double)a0;
+ (id)messageFontOfSize:(double)a0;
+ (id)monospacedDigitSystemFontOfSize:(double)a0 weight:(double)a1;
+ (id)monospacedSystemFontOfSize:(double)a0 weight:(double)a1;
+ (id)paletteFontOfSize:(double)a0;
+ (id)systemFontOfSize:(double)a0;
+ (id)systemFontOfSize:(double)a0 weight:(double)a1;
+ (double)systemFontSizeForControlSize:(unsigned long long)a0;
+ (id)titleBarFontOfSize:(double)a0;
+ (id)toolTipsFontOfSize:(double)a0;
+ (id)toolbarLabelFontOfSize:(double)a0;
+ (double)toolbarLabelFontSizeForToolbarSize:(unsigned long long)a0;
+ (id)userFixedPitchFontOfSize:(double)a0;
+ (id)systemFontOfSize:(double)a0 weight:(double)a1 design:(id)a2;
+ (BOOL)_allowsLatin1MappingForFontFamily:(id)a0;
+ (BOOL)_characterCannotBeRendered:(unsigned int)a0;
+ (id)_fontWithName:(id)a0 size:(double)a1;
+ (void)_handleMenuFontSizeDidChange;
+ (id)_lightSystemFontOfSize:(double)a0;
+ (id)_mediumSystemFontOfSize:(double)a0;
+ (id)_opticalBoldSystemFontOfSize:(double)a0;
+ (id)_opticalSystemFontOfSize:(double)a0;
+ (void)_postFontSetChangedNotifications;
+ (void)_refreshMenuFontsIfNeeded;
+ (void)_setExportSpecialFonts:(BOOL)a0;
+ (BOOL)_simulatesTransparentLayerBehavior;
+ (id)_thinSystemFontOfSize:(double)a0;
+ (id)_toolbarLabelFontOfSize:(double)a0;
+ (double)_toolbarLabelFontSize;
+ (double)_toolbarSmallLabelFontSize;
+ (id)_ultraLightSystemFontOfSize:(double)a0;
+ (void)_updateAntialiasingThreshold;
+ (id)boldSystemFontOfSize:(double)a0 width:(id)a1;
+ (id)coveredCharacterCache;
+ (id)findFontLike:(id)a0 forCharacter:(unsigned int)a1 inLanguage:(id)a2;
+ (id)findFontLike:(id)a0 forString:(id)a1 withRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })a2 inLanguage:(id)a3;
+ (id)findFontLike:(id)a0 traits:(unsigned long long)a1 forCharacters:(const unsigned short *)a2 length:(unsigned long long)a3 inLanguage:(id)a4 checkCoveredCache:(BOOL)a5;
+ (id)fontWithDescriptor:(id)a0 textTransform:(id)a1;
+ (id)fontWithName:(id)a0 matrix:(const double *)a1;
+ (id)labelFontOfSize:(double)a0;
+ (id)preferredFontNames;
+ (void)setLocaleListForDefaultFontFallback:(id)a0;
+ (void)setPreferredFontNames:(id)a0;
+ (void)setUserFixedPitchFont:(id)a0;
+ (void)setUserFont:(id)a0;
+ (id)systemFontOfSize:(double)a0 weight:(double)a1 width:(double)a2;
+ (id)systemFontOfSize:(double)a0 width:(id)a1;
+ (void)useFont:(id)a0;

- (id)replacementObjectForPortCoder:(id)a0;
- (id)_fontWithVariantWeight:(unsigned long long)a0;
- (double)_trackingNecessaryToScaleToFontOfSize:(double)a0;
- (unsigned long long)_variantWeight;
- (id)copy;
- (id)copyWithZone:(struct _NSZone { } *)a0;
- (id)description;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)a0;
- (void)set;
- (Class)classForCoder;
- (void)encodeWithCoder:(id)a0;
- (id)initWithCoder:(id)a0;
- (BOOL)_isUIFont;
- (void)setInContext:(id)a0;
- (BOOL)_isHiraginoFont;
- (BOOL)__isSystemFont;
- (double)_ascenderDeltaForBehavior:(long long)a0;
- (unsigned int)_atsFontID;
- (double)_baseLineHeightForFont:(BOOL)a0;
- (double)_defaultLineHeightForUILayout;
- (double)_descenderDeltaForBehavior:(long long)a0;
- (BOOL)_isDefaultFace;
- (double)_leading;
- (id)_similarFontWithName:(id)a0;
- (BOOL)_usesAppearanceFontSize;
- (struct CGSize { double x0; double x1; })advancementForGlyph:(unsigned int)a0;
- (id)baseFontForSingleLineModeCell:(id)a0;
- (const void *)ctFontRef;
- (id)fontForAppearance:(id)a0;
- (id)fontWithSize:(double)a0;
- (void)getAdvancements:(struct CGSize { double x0; double x1; } *)a0 forPackedGlyphs:(const void *)a1 length:(unsigned long long)a2;
- (void)getVerticalOriginTranslations:(struct CGSize { double x0; double x1; } *)a0 forCGGlyphs:(const unsigned short *)a1 count:(unsigned long long)a2;
- (unsigned int)glyphWithName:(id)a0;
- (double)lineHeight;
- (unsigned long long)renderingMode;
- (id)screenFont;
- (id)_coveredCharSet;
- (BOOL)_getLatin1Glyphs:(const unsigned short **)a0 advanceWidths:(const double **)a1;
- (const double *)_matrix;
- (struct CGFont { } *)_backingCGSFont;
- (BOOL)_hasColorGlyphs;
- (unsigned long long)_numberOfGlyphs;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })_textMatrixTransformForContext:(id)a0;
- (BOOL)glyphIsEncoded:(unsigned int)a0;
- (double)__ascenderDeltaForBehavior:(long long)a0;
- (double)_baselineOffsetForUILayout;
- (BOOL)_canDrawOutsideLineHeight;
- (unsigned int)_defaultGlyphForChar:(unsigned short)a0;
- (double)_defaultLineHeight:(BOOL)a0;
- (double)_defaultLineHightForUILayout;
- (BOOL)_drawsOutsideBBox;
- (id)_externalFontName;
- (id)_fontWithDescriptor:(id)a0;
- (double *)_glyphAdvancementCacheWithLength:(long long)a0;
- (BOOL)_glyphDrawsOutsideLineHeight:(unsigned int)a0;
- (BOOL)_hasNonNominalDescriptor;
- (BOOL)_hasVerticalMetricsWithPlatformFont:(struct __CTFont { } *)a0;
- (BOOL)_isFakeFixedPitch;
- (BOOL)_isIdealMetricsOnly;
- (BOOL)_isScreenFont;
- (BOOL)_isUIFontWithUIKitBehavior;
- (id)_kernOverride;
- (const unsigned short *)_latin1MappingTable:(BOOL *)a0;
- (BOOL)_matrixIsIdentity;
- (unsigned long long)_metaType;
- (id)_safeFontDescriptor;
- (void)_setSystemFontType:(unsigned long long)a0 usesAppearanceFontSize:(BOOL)a1;
- (id)_substituteFontWithFontDescriptor:(struct __CTFontDescriptor { } *)a0;
- (double)_totalAdvancementForNativeGlyphs:(const unsigned short *)a0 count:(long long)a1;
- (id)_typeface;
- (double)_widthOfPackedGlyphs:(const char *)a0 count:(unsigned long long)a1;
- (struct CGSize { double x0; double x1; })advancementForCGGlyph:(unsigned short)a0;
- (id)afmDictionary;
- (void)applyToGraphicsContext:(id)a0;
- (id)bestMatchingFontForCharacters:(const unsigned short *)a0 length:(unsigned long long)a1 attributes:(id)a2 actualCoveredLength:(unsigned long long *)a3;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundingRectForCGGlyph:(unsigned short)a0;
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })boundingRectForGlyph:(unsigned int)a0;
- (BOOL)coversAllCharactersInString:(id)a0;
- (BOOL)coversCharacter:(unsigned short)a0;
- (double)defaultLineHeightForFont;
- (id)encodingScheme;
- (id)fontInstanceForRenderingMode:(unsigned long long)a0;
- (void)getAdvancements:(struct CGSize { double x0; double x1; } *)a0 forCGGlyphs:(const unsigned short *)a1 count:(unsigned long long)a2;
- (void)getAdvancements:(struct CGSize { double x0; double x1; } *)a0 forGlyphs:(const unsigned int *)a1 count:(unsigned long long)a2;
- (void)getBoundingRects:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 forCGGlyphs:(const unsigned short *)a1 count:(unsigned long long)a2;
- (void)getBoundingRects:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } *)a0 forGlyphs:(const unsigned int *)a1 count:(unsigned long long)a2;
- (unsigned long long)getCaretPositions:(double *)a0 forGlyph:(unsigned int)a1 maximumLength:(unsigned long long)a2;
- (unsigned long long)glyphPacking;
- (unsigned int)hyphenGlyphForLanguage:(id)a0;
- (unsigned int)hyphenGlyphForLocale:(id)a0;
- (id)initWithBaseFont:(id)a0;
- (id)initWithTypefaceInfo:(id)a0 key:(id)a1 renderingMode:(unsigned long long)a2;
- (BOOL)isBaseFont;
- (BOOL)isScreenFont;
- (BOOL)isSystemFont;
- (id)lastResortFont;
- (id)nameOfGlyph:(unsigned int)a0;
- (id)newFontInstanceForRenderingMode:(unsigned long long)a0;
- (struct CGPoint { double x0; double x1; })positionOfGlyph:(unsigned int)a0 forCharacter:(unsigned short)a1 struckOverRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a2;
- (struct CGPoint { double x0; double x1; })positionOfGlyph:(unsigned int)a0 precededByGlyph:(unsigned int)a1 isNominal:(BOOL *)a2;
- (struct CGPoint { double x0; double x1; })positionOfGlyph:(unsigned int)a0 struckOverGlyph:(unsigned int)a1 metricsExist:(BOOL *)a2;
- (struct CGPoint { double x0; double x1; })positionOfGlyph:(unsigned int)a0 struckOverRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })a1 metricsExist:(BOOL *)a2;
- (long long)positionsForCompositeSequence:(unsigned int *)a0 numberOfGlyphs:(long long)a1 pointArray:(struct CGPoint { double x0; double x1; } *)a2;
- (id)preferredFallbackFontForLanguage:(id)a0;
- (id)printerFont;
- (id)screenFontWithRenderingMode:(unsigned long long)a0;
- (unsigned long long)traits;
- (id)verticalFontInstanceForRenderingMode:(unsigned long long)a0;
- (double)widthOfString:(id)a0;

@end
