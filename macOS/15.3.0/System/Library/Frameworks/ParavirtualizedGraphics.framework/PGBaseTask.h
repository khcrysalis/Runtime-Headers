@class NSString;
@protocol MTLCommandQueue, MTLDevice, MTLEvent, MTLComputePipelineState, PGDeserializer;

@interface PGBaseTask : NSObject <PGDeserializerObjectDelegate, PGTask_Resource> {
    unsigned long long _length;
    struct unordered_map<unsigned int, PGPtr<id<MTLSamplerState>>, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, PGPtr<id<MTLSamplerState>>>>> { struct __hash_table<std::__hash_value_type<unsigned int, PGPtr<id<MTLSamplerState>>>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLSamplerState>>>, std::hash<unsigned int>, std::equal_to<unsigned int>>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLSamplerState>>>, std::equal_to<unsigned int>, std::hash<unsigned int>>, std::allocator<std::__hash_value_type<unsigned int, PGPtr<id<MTLSamplerState>>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLSamplerState>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLSamplerState>>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLSamplerState>>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLSamplerState>>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLSamplerState>>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLSamplerState>>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLSamplerState>>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLSamplerState>>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLSamplerState>>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLSamplerState>>>, std::hash<unsigned int>, std::equal_to<unsigned int>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLSamplerState>>>, std::equal_to<unsigned int>, std::hash<unsigned int>>> { float __value_; } __p3_; } __table_; } _samplers;
    struct unordered_map<unsigned int, PGPtr<id<MTLDepthStencilState>>, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, PGPtr<id<MTLDepthStencilState>>>>> { struct __hash_table<std::__hash_value_type<unsigned int, PGPtr<id<MTLDepthStencilState>>>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLDepthStencilState>>>, std::hash<unsigned int>, std::equal_to<unsigned int>>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLDepthStencilState>>>, std::equal_to<unsigned int>, std::hash<unsigned int>>, std::allocator<std::__hash_value_type<unsigned int, PGPtr<id<MTLDepthStencilState>>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLDepthStencilState>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLDepthStencilState>>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLDepthStencilState>>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLDepthStencilState>>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLDepthStencilState>>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLDepthStencilState>>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLDepthStencilState>>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLDepthStencilState>>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLDepthStencilState>>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLDepthStencilState>>>, std::hash<unsigned int>, std::equal_to<unsigned int>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLDepthStencilState>>>, std::equal_to<unsigned int>, std::hash<unsigned int>>> { float __value_; } __p3_; } __table_; } _depthStencils;
    struct unordered_map<unsigned int, PGPtr<id<MTLRenderPipelineState>>, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, PGPtr<id<MTLRenderPipelineState>>>>> { struct __hash_table<std::__hash_value_type<unsigned int, PGPtr<id<MTLRenderPipelineState>>>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLRenderPipelineState>>>, std::hash<unsigned int>, std::equal_to<unsigned int>>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLRenderPipelineState>>>, std::equal_to<unsigned int>, std::hash<unsigned int>>, std::allocator<std::__hash_value_type<unsigned int, PGPtr<id<MTLRenderPipelineState>>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRenderPipelineState>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRenderPipelineState>>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRenderPipelineState>>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRenderPipelineState>>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRenderPipelineState>>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRenderPipelineState>>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRenderPipelineState>>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRenderPipelineState>>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRenderPipelineState>>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLRenderPipelineState>>>, std::hash<unsigned int>, std::equal_to<unsigned int>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLRenderPipelineState>>>, std::equal_to<unsigned int>, std::hash<unsigned int>>> { float __value_; } __p3_; } __table_; } _renderPipelines;
    struct unordered_map<unsigned int, PGPtr<id<MTLComputePipelineState>>, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, PGPtr<id<MTLComputePipelineState>>>>> { struct __hash_table<std::__hash_value_type<unsigned int, PGPtr<id<MTLComputePipelineState>>>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLComputePipelineState>>>, std::hash<unsigned int>, std::equal_to<unsigned int>>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLComputePipelineState>>>, std::equal_to<unsigned int>, std::hash<unsigned int>>, std::allocator<std::__hash_value_type<unsigned int, PGPtr<id<MTLComputePipelineState>>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLComputePipelineState>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLComputePipelineState>>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLComputePipelineState>>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLComputePipelineState>>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLComputePipelineState>>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLComputePipelineState>>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLComputePipelineState>>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLComputePipelineState>>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLComputePipelineState>>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLComputePipelineState>>>, std::hash<unsigned int>, std::equal_to<unsigned int>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLComputePipelineState>>>, std::equal_to<unsigned int>, std::hash<unsigned int>>> { float __value_; } __p3_; } __table_; } _computePipelines;
    struct unordered_map<unsigned int, PGPtr<id<MTLFence>>, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, PGPtr<id<MTLFence>>>>> { struct __hash_table<std::__hash_value_type<unsigned int, PGPtr<id<MTLFence>>>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLFence>>>, std::hash<unsigned int>, std::equal_to<unsigned int>>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLFence>>>, std::equal_to<unsigned int>, std::hash<unsigned int>>, std::allocator<std::__hash_value_type<unsigned int, PGPtr<id<MTLFence>>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFence>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFence>>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFence>>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFence>>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFence>>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFence>>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFence>>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFence>>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFence>>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLFence>>>, std::hash<unsigned int>, std::equal_to<unsigned int>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLFence>>>, std::equal_to<unsigned int>, std::hash<unsigned int>>> { float __value_; } __p3_; } __table_; } _fences;
    struct unordered_map<unsigned int, PGPtr<id<MTLRasterizationRateMap>>, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, PGPtr<id<MTLRasterizationRateMap>>>>> { struct __hash_table<std::__hash_value_type<unsigned int, PGPtr<id<MTLRasterizationRateMap>>>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLRasterizationRateMap>>>, std::hash<unsigned int>, std::equal_to<unsigned int>>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLRasterizationRateMap>>>, std::equal_to<unsigned int>, std::hash<unsigned int>>, std::allocator<std::__hash_value_type<unsigned int, PGPtr<id<MTLRasterizationRateMap>>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRasterizationRateMap>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRasterizationRateMap>>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRasterizationRateMap>>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRasterizationRateMap>>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRasterizationRateMap>>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRasterizationRateMap>>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRasterizationRateMap>>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRasterizationRateMap>>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLRasterizationRateMap>>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLRasterizationRateMap>>>, std::hash<unsigned int>, std::equal_to<unsigned int>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLRasterizationRateMap>>>, std::equal_to<unsigned int>, std::hash<unsigned int>>> { float __value_; } __p3_; } __table_; } _rasterizationRateMaps;
    struct unordered_map<unsigned int, PGPtr<id<MTLFunction>>, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, PGPtr<id<MTLFunction>>>>> { struct __hash_table<std::__hash_value_type<unsigned int, PGPtr<id<MTLFunction>>>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLFunction>>>, std::hash<unsigned int>, std::equal_to<unsigned int>>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLFunction>>>, std::equal_to<unsigned int>, std::hash<unsigned int>>, std::allocator<std::__hash_value_type<unsigned int, PGPtr<id<MTLFunction>>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFunction>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFunction>>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFunction>>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFunction>>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFunction>>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFunction>>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFunction>>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFunction>>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<id<MTLFunction>>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLFunction>>>, std::hash<unsigned int>, std::equal_to<unsigned int>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, PGPtr<id<MTLFunction>>>, std::equal_to<unsigned int>, std::hash<unsigned int>>> { float __value_; } __p3_; } __table_; } _functions;
    struct unordered_map<unsigned int, PGPtr<PGResource *>, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, PGPtr<PGResource *>>>> { struct __hash_table<std::__hash_value_type<unsigned int, PGPtr<PGResource *>>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, PGPtr<PGResource *>>, std::hash<unsigned int>, std::equal_to<unsigned int>>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, PGPtr<PGResource *>>, std::equal_to<unsigned int>, std::hash<unsigned int>>, std::allocator<std::__hash_value_type<unsigned int, PGPtr<PGResource *>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<PGResource *>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<PGResource *>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<PGResource *>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<PGResource *>>, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<PGResource *>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<PGResource *>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<PGResource *>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<PGResource *>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, PGPtr<PGResource *>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, PGPtr<PGResource *>>, std::hash<unsigned int>, std::equal_to<unsigned int>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, PGPtr<PGResource *>>, std::equal_to<unsigned int>, std::hash<unsigned int>>> { float __value_; } __p3_; } __table_; } _resources;
    struct shared_mutex { struct __shared_mutex_base { struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } __mut_; struct condition_variable { struct _opaque_pthread_cond_t { long long __sig; char __opaque[40]; } __cv_; } __gate1_; struct condition_variable { struct _opaque_pthread_cond_t { long long __sig; char __opaque[40]; } __cv_; } __gate2_; unsigned int __state_; } __base_; } _mutex;
    struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _objectListMutex;
    struct recursive_mutex { struct _opaque_pthread_mutex_t { long long __sig; char __opaque[56]; } __m_; } _objectDatabaseMutex;
    id<MTLCommandQueue> _pagingQueue;
    id<MTLEvent> _pagingEvent;
    unsigned long long _pagingCounter;
    struct unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> { struct __hash_table<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<unsigned int, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned int, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned int, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned int, void *> *> *>>> { void **__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned int, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<unsigned int, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<unsigned int, void *> *>, std::allocator<std::__hash_node<unsigned int, void *>>> { struct __hash_node_base<std::__hash_node<unsigned int, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::hash<unsigned int>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::equal_to<unsigned int>> { float __value_; } __p3_; } __table_; } _reservedSerializerTextures;
}

@property (readonly) BOOL ioSurfaceBuffersAllowed;
@property (readonly) BOOL argumentBuffersAllowed;
@property (readonly) unsigned long long objectListCount;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) id<PGDeserializer> deserializer;
@property (readonly) id<MTLDevice> mtlDevice;
@property (readonly) const struct APVFeatures { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; unsigned int x17; unsigned int x18; BOOL x19; BOOL x20; BOOL x21; BOOL x22; BOOL x23; BOOL x24; BOOL x25; BOOL x26; BOOL x27; BOOL x28; BOOL x29; BOOL x30; BOOL x31; BOOL x32; BOOL x33; BOOL x34; BOOL x35; BOOL x36; BOOL x37; BOOL x38; BOOL x39; BOOL x40; BOOL x41; BOOL x42; } *features;
@property (readonly) id<MTLComputePipelineState> blitInRGB_2P_XR10_A8_pipeline;
@property (readonly) id<MTLComputePipelineState> blitOutRGB_2P_XR10_A8_pipeline;
@property (readonly) BOOL supportsBufferWithAddressRanges;
@property (readonly) BOOL supportsHeapWithAddressRanges;
@property (readonly) BOOL supportsResourceDetachBacking;

- (void)dealloc;
- (void).cxx_destruct;
- (id).cxx_construct;
- (void)teardown;
- (void)deleteResource:(unsigned int)a0;
- (void)deleteSamplerStateForReference:(unsigned int)a0;
- (id)newBufferForVirtualPage:(unsigned int)a0 length:(unsigned long long)a1;
- (id)addressRangesForVirtualPage:(unsigned int)a0 length:(unsigned long long)a1 readOnly:(BOOL *)a2;
- (id)backingForID:(unsigned int)a0;
- (void)clearPlacementEntry:(unsigned int)a0;
- (void)copyFromVirtualOffset:(unsigned long long)a0 length:(unsigned long long)a1 dst:(void *)a2;
- (id)dataFromVirtualOffset:(unsigned long long)a0 length:(unsigned long long)a1;
- (void)deleteBufferForReference:(unsigned int)a0;
- (void)deleteComputePipelineStateForReference:(unsigned int)a0;
- (void)deleteDepthStencilStateForReference:(unsigned int)a0;
- (void)deleteFenceForReference:(unsigned int)a0;
- (void)deleteFunctionForReference:(unsigned int)a0;
- (void)deleteHeapForReference:(unsigned int)a0;
- (void)deleteObjectWithSerializedData:(const void *)a0 serializedDataSize:(unsigned long long)a1;
- (void)deleteRasterizationRateMapForReference:(unsigned int)a0;
- (void)deleteRenderPipelineStateForReference:(unsigned int)a0;
- (void)deleteResourceForReference:(unsigned int)a0;
- (void)deleteResourceLocked:(unsigned int)a0 clearPlacementListEntry:(BOOL)a1;
- (void)deleteTextureForReference:(unsigned int)a0;
- (void)discardResources:(const struct { unsigned int x0; } *)a0 count:(unsigned int)a1;
- (void)flushResources;
- (id)getBufferForReference:(unsigned int)a0;
- (id)getComputePipelineStateForReference:(unsigned int)a0;
- (id)getDepthStencilStateForReference:(unsigned int)a0;
- (id)getExistingHostResource:(unsigned int)a0;
- (id)getFenceForReference:(unsigned int)a0;
- (id)getFunctionForReference:(unsigned int)a0;
- (id)getHeapForReference:(unsigned int)a0;
- (id)getHostResource:(unsigned int)a0;
- (void)getObject:(unsigned int)a0 entry:(struct { unsigned char x0 : 8; unsigned int x1 : 24; unsigned long long x2; } *)a1;
- (union { unsigned long long x0; struct { unsigned long long x0; unsigned long long x1; } x1; } *)getPlacementEntry:(unsigned int)a0;
- (id)getRasterizationRateMapForReference:(unsigned int)a0;
- (id)getRenderPipelineStateForReference:(unsigned int)a0;
- (id)getResourceForReference:(unsigned int)a0;
- (id)getSamplerStateForReference:(unsigned int)a0;
- (id)getTextureForReference:(unsigned int)a0;
- (void)invalidateGuestForSharedTextureBacking:(unsigned int *)a0 sharedTextureBackingCount:(unsigned int)a1;
- (void)invalidateResources:(const struct { unsigned int x0; unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; } *)a0 count:(unsigned int)a1;
- (void)mapMemoryAtOffset:(unsigned long long)a0 length:(unsigned long long)a1;
- (id)newBackingForReference:(unsigned int)a0;
- (id)newBackingRefTextureWithEntry:(struct { unsigned char x0 : 8; unsigned int x1 : 24; unsigned long long x2; } *)a0 forReference:(unsigned int)a1;
- (id)newBufferForReference:(unsigned int)a0;
- (id)newComputePipelineStateForReference:(unsigned int)a0;
- (id)newDepthStencilStateForReference:(unsigned int)a0;
- (id)newFenceForReference:(unsigned int)a0;
- (id)newFunctionForReference:(unsigned int)a0;
- (id)newHeapForReference:(unsigned int)a0;
- (id)newMapperRefTextureWithEntry:(struct { unsigned char x0 : 8; unsigned int x1 : 24; unsigned long long x2; } *)a0 forReference:(unsigned int)a1;
- (id)newNormalTextureWithEntry:(struct { unsigned char x0 : 8; unsigned int x1 : 24; unsigned long long x2; } *)a0 forReference:(unsigned int)a1;
- (id)newRasterizationRateMapForReference:(unsigned int)a0;
- (id)newRenderPipelineStateForReference:(unsigned int)a0;
- (id)newResourceForReference:(unsigned int)a0;
- (id)newSamplerStateForReference:(unsigned int)a0;
- (id)newSerializerTextureWithEntry:(struct { unsigned char x0 : 8; unsigned int x1 : 24; unsigned long long x2; } *)a0 forReference:(unsigned int)a1;
- (id)newSharedTextureHandleForID:(unsigned int)a0;
- (id)newSharedTextureWithEntry:(struct { unsigned char x0 : 8; unsigned int x1 : 24; unsigned long long x2; } *)a0 forReference:(unsigned int)a1;
- (id)newTextureForReference:(unsigned int)a0;
- (unsigned long long)nextTraceID;
- (void)prepareBacking:(id)a0 inEncoder:(id)a1;
- (void)registerComputePipelineStateForReference:(unsigned int)a0 computePipeline:(id)a1;
- (void)registerDepthStencilStateForReference:(unsigned int)a0 depthStencil:(id)a1;
- (void)registerFenceForReference:(unsigned int)a0 fence:(id)a1;
- (void)registerFunctionForReference:(unsigned int)a0 function:(id)a1;
- (void)registerHostResource:(id)a0 forReference:(unsigned int)a1;
- (void)registerRasterizationRateMapForReference:(unsigned int)a0 rasterizationRateMap:(id)a1;
- (void)registerRenderPipelineStateForReference:(unsigned int)a0 renderPipeline:(id)a1;
- (void)registerSamplerStateForReference:(unsigned int)a0 sampler:(id)a1;
- (void)releaseIOSurfaceWithMappingID:(unsigned long long)a0 surface:(id)a1;
- (void)replacePhysical:(unsigned int)a0;
- (void)reserveObjects;
- (void)reservePlacedOtherSerializerReference:(unsigned int)a0;
- (void)reservePlacedTextureForReference:(unsigned int)a0 indices:(void *)a1;
- (id)retainIOSurfaceWithMappingID:(unsigned long long)a0;
- (void)setObjectListOffset:(unsigned long long)a0 length:(unsigned int)a1;
- (void)synchronizeBacking:(id)a0 inEncoder:(id)a1;
- (void)synchronizeResources:(const struct { unsigned int x0; } *)a0 count:(unsigned int)a1 discard:(BOOL)a2 completionHandler:(id /* block */)a3;
- (void)unmapMemoryAtOffset:(unsigned long long)a0 length:(unsigned long long)a1;
- (void)writeToVirtualOffset:(unsigned long long)a0 length:(unsigned long long)a1 src:(const void *)a2;

@end
