@class NSMutableDictionary, SFSearchResult_SpotlightExtras, NSDate, NSDictionary, NSObject, NSMutableArray, SPSearchQueryContext, NSString, SSBullseyeTopHitsManager, PRSRankingConfiguration, SPApplicationQuery, SPMetadataQuery, NSArray, SFStartLocalSearchFeedback, SFMutableResultSection, SSRankingManager, SPKQuery;
@protocol OS_dispatch_queue, SPQueryTaskDelegate, OS_dispatch_source;

@interface SPQueryTask : NSObject <SPKQueryDelegate> {
    SFMutableResultSection *_topHitSection;
    double _queryStartTime;
    BOOL _shortcutResultChecked;
    BOOL _canceled;
    BOOL _willSendPerformanceFeedback;
    unsigned int _qosClass;
    NSObject<OS_dispatch_source> *_timer;
    SPKQuery *_timerQuery;
    NSArray *_timerSections;
    NSArray *_timerServerSuggestions;
    NSArray *_timerLocalSuggestions;
    int _timerResponseKind;
    int _timerTopHitIsIn;
    double _lastResponseTime;
    double _lastUpdateTime;
    unsigned int _updateDelaySeconds;
    unsigned long long _responseCount;
    struct __MDAppRankEvaluator { } *_appRankEvaluator;
    NSMutableArray *_serverSuggestionResults;
    NSMutableArray *_localSuggestionResults;
    NSMutableDictionary *_syndicatedResultSections;
    unsigned long long _event;
}

@property (retain, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (retain, nonatomic) NSArray *sections;
@property BOOL suggestionsAreBlended;
@property BOOL finished;
@property BOOL live;
@property (retain, nonatomic) NSMutableArray *ioQueries;
@property (retain) NSString *userQueryString;
@property double timeOfLastResponse;
@property unsigned long long countOfLastResponse;
@property BOOL topHitIsInOfLastResponse;
@property (retain, nonatomic) SSBullseyeTopHitsManager *topHitsManager;
@property (retain) SPMetadataQuery *mainQuery;
@property (retain) SPApplicationQuery *appQuery;
@property (retain) NSMutableArray *auxQueries;
@property (retain) NSMutableDictionary *responses;
@property (retain) NSString *fbq;
@property long long delta;
@property (readonly) BOOL isCanceled;
@property (nonatomic) BOOL prefersLocalUserTypedSuggestion;
@property (nonatomic) BOOL wantsSuggestions;
@property (retain) NSString *shortcutUserQueryString;
@property (retain) PRSRankingConfiguration *rankingConfiguration;
@property (retain) SFStartLocalSearchFeedback *startLocalSearchFeedback;
@property (retain, nonatomic) NSString *client;
@property (weak, nonatomic) NSObject<SPQueryTaskDelegate> *delegate;
@property (retain, nonatomic) SPSearchQueryContext *queryContext;
@property (readonly) unsigned long long queryGroupId;
@property (retain, nonatomic) NSString *keyboardLanguage;
@property (nonatomic) BOOL forceStableResults;
@property BOOL isAdvancedQuerySyntax;
@property BOOL isPeopleSearch;
@property (retain) NSDictionary *nlpQueryCategoryPreference;
@property (retain) NSString *nlpQueryConfidence;
@property (readonly) BOOL parsecFinished;
@property (readonly) BOOL metadataFinished;
@property (readonly) BOOL corespotlightFinished;
@property (retain, nonatomic) NSArray *rankedSections;
@property (retain, nonatomic) NSObject<OS_dispatch_queue> *queue;
@property (retain, nonatomic) NSArray *currentResultsArray;
@property (retain, nonatomic) SFSearchResult_SpotlightExtras *shortcutResult;
@property (retain, nonatomic) NSDate *shortcutLastUsedDate;
@property (nonatomic) BOOL parsecCameLaterThanSRT;
@property (nonatomic) BOOL hasSentTopHit;
@property int source;
@property unsigned long long triggerSearchRequestEvent;
@property (retain, nonatomic) SSRankingManager *rankingManager;

+ (void)initialize;
+ (void)activate;
+ (void)deactivate;
+ (void)preheat;
+ (id)_queriesForUserQuery:(id)a0 queryContext:(id)a1;
+ (id)_queriesForUserQuery:(id)a0 updatedQueries:(id)a1 otherQueries:(id)a2 keyboardLanguage:(id)a3;
+ (id)queryClasses;
+ (id)queryClassesSearchTool;
+ (void)registerModelUpdatingActivity;
+ (id)syntheticLocalSections;

- (void)dealloc;
- (id)description;
- (void).cxx_destruct;
- (void)start;
- (double)startTime;
- (void)cancel;
- (id)allSections;
- (void)finishResponse:(id)a0;
- (void)sendPerformanceFeedback:(id)a0 forKey:(id)a1;
- (id)URLRepresentedByBookmarkResult:(id)a0;
- (void)buildSyndicatedSectionWithSections:(id)a0 queryContext:(id)a1 isPeopleSearch:(BOOL)a2;
- (void)_addParsecQueryResults:(id)a0 toSections:(id)a1;
- (void)_cleanupAuxQueries;
- (void)_initQueries;
- (BOOL)_isInternallyCompleted;
- (void)_loadSyndicatedSectionsWithQueryContext:(id)a0;
- (id)_makeRelatedSearchSectionWithQuery:(id)a0 queryId:(unsigned long long)a1 sections:(id)a2 rankingManager:(id)a3;
- (void)_processResponse:(id)a0 toQuery:(id)a1;
- (void)_responseTimerCancel;
- (void)_sendResponseKind:(int)a0 withSections:(id)a1 withServerSuggestions:(id)a2 withLocalSuggestions:(id)a3 toQuery:(id)a4 topHitIsIn:(BOOL)a5 delay:(double)a6 internal:(BOOL)a7;
- (id)_showAllInFinderResultForSections:(id)a0 query:(id)a1 queryID:(unsigned long long)a2;
- (void)_startMetadata;
- (void)_startNonMetadata;
- (BOOL)_topHitIsIn;
- (id)_ttrResultWithQuery:(id)a0 queryId:(unsigned long long)a1 sections:(id)a2 rankingManager:(id)a3;
- (id)_webAsTypedSearchResultWithQuery:(id)a0 queryId:(unsigned long long)a1;
- (long long)addResultsForGroup:(id)a0 toArray:(id)a1 resultIdSet:(id)a2 focusString:(id)a3 currentLocale:(id)a4;
- (void)buildSyndicatedPhotosSectionsWithSections:(id)a0 queryContext:(id)a1;
- (void)deDuplicateCalendarResults:(id)a0;
- (void)deDuplicateMailResults:(id)a0;
- (void)deDuplicateResultSetWithSections:(id)a0 duplicatedDictResults:(id *)a1 originalDictResults:(id *)a2;
- (void)deDuplicateSettingsResults:(id)a0;
- (void)dedupeResults:(id)a0;
- (void)filterMixedGroup:(id)a0 sectionLimit:(unsigned long long)a1;
- (void)filterPreferedSectionResults:(id)a0 isAdvancedQuerySyntax:(BOOL)a1;
- (id)findDistinctPathIdentifiers;
- (void)finishWithResponseKind:(int)a0 sections:(id)a1 serverSuggestions:(id)a2 localSuggestions:(id)a3 groupedResults:(id)a4 userQueryString:(id)a5 topHitIsIn:(BOOL)a6;
- (id)initWithQueryContext:(id)a0;
- (void)markAsEngaged:(id)a0 forQueryString:(id)a1 timestamp:(double)a2 preview:(BOOL)a3;
- (void)markAsUsed:(id)a0 subItem:(BOOL)a1;
- (id)mergeResultSet:(id)a0 withResultSet:(id)a1;
- (void)mergeSectionsWithRankedSections:(id)a0 localSectionBundleID:(id)a1 serverSectionBundleIDs:(id)a2 mergedSectionBundleID:(id)a3 mergedSectionTitle:(id)a4;
- (void)queryTask:(id)a0 gotResponse:(id)a1;
- (void)rankAndPrune:(id)a0 maxResults:(unsigned long long)a1 totalResultCount:(long long *)a2 query:(id)a3 currentLocale:(id)a4 isAdvancedQuerySyntax:(BOOL)a5 currentTime:(double)a6;
- (id)resultRankingFeedbackWithResult:(id)a0 duplicateResults:(id)a1 originalResultsId:(id)a2;
- (id)sectionRankingFeedbackWithSections:(id)a0 duplicateResults:(id)a1 originalResultsId:(id)a2;
- (id)sectionWithBundleId:(id)a0;
- (id)sectionWithBundleId:(id)a0;
- (void)sendRankingFeedbackForResultsArray:(id)a0 withSections:(id)a1;
- (void)sendTTRLogsWithSections:(id)a0 rankingManager:(id)a1;
- (id)suggestionsWithSearchString:(id)a0 sections:(id)a1 topHitSection:(id)a2 highestLocalScore:(double)a3 rankingManager:(id)a4;
- (id)topHitSection;
- (BOOL)topHitStillExistsInSections:(id)a0;
- (void)willSendPerformanceFeedback;

@end
